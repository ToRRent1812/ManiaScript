/** 
 * Custom scores table builded by manialink
 */
#Const Version		"2014-10-02"
#Const ScriptName	"ST.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Rank.Script.txt" as Rank

#Const C_LayerName "G_Lib_St"

#Const C_SequencePlaying			1		// Scores table mode playing
#Const C_SequencePodium				2		// Scores table mode podium

#Const C_MaxPlayers 				6 		// Max players visible in ST

#Const C_ImgBaseDir				"file://Media/Manialinks/Shootmania/Common/"
#Const C_ImgModeDir				"file://Media/Manialinks/Shootmania/Common/FireFight"

Text GetScriptVersion() 
{
	return Version;
}

Text GetScriptName() 
{
	return ScriptName;
}

// Generate players list for the score table
Text Private_CreatePlayersList() 
{
	declare ML ="";
	declare PosX = 8.;
	declare PosY = 17.0;
	declare PlayersByCol = C_MaxPlayers;
	declare K = 1;
	
	declare Team1Color = TextLib::ColorToText(Teams[0].ColorPrimary);
	declare Team2Color = TextLib::ColorToText(Teams[1].ColorPrimary);
	
	ML ^= """
<framemodel posn="0 0" id="Frame_PlayerLeft">
	<gauge posn="-7 -11.5 1" sizen="83.5 12" valign="center" color="{{{Team1Color}}}5" style="EnergyBar" drawbg="0" drawblockbg="0" ratio="0.989"/>
	<quad posn="-17 -2.1 5" sizen="91.5 11.5" bgcolor="000" opacity="0.5" id="Quad_Eliminated" hidden="1" />
	<frame posn="-4 0.4">
		<quad posn="7 -3.2 2" sizen="7 7" halign="right" hidden="1" bgcolor="0004" id="Quad_Tier" />
		<quad posn="-7 -2 3" sizen="10 10" halign="center" bgcolor="0003" id="Quad_Avatar" />
		<label posn="8 -6 3" sizen="30 9" textsize="3" valign="center" id="Label_Name" />
		<label posn="66 -6 3" sizen="9 6" textsize="4" halign="left" valign="center" id="Label_KD" />
		<label posn="55 -6 3" sizen="9 5" textsize="3" halign="left" valign="center" id="Label_Acc" />
		<label posn="49 -6 3" sizen="9 5" textsize="3" halign="left" valign="center" id="Label_Goals" />
	</frame>
	<frame posn="-2 -11.8 3">
		<frame posn="-1 0">
			<label posn="-1 0" sizen="30 5" textsize="1" scale="0.8" textemboss="1" valign="center" id="Label_TierName" />
			<label posn="40 0" sizen="40 5" textsize="1" scale="0.8" textemboss="1" halign="right" valign="center" id="Label_MVP" />
		</frame>
		<frame posn="50 0 5" id="Frame_PlayerRank" hidden="1">
			<format textcolor="bb8" textsize="1" scale="0.8"/>
			<label posn="15 0" sizen="10 4" valign="center" id="Label_Progress"/>
			<label posn="0 0" sizen="10 4" valign="center" id="Label_RankPoints" />
		</frame>
	</frame>
</framemodel>
<framemodel posn="0 0" id="Frame_PlayerRight">
	<gauge posn="7 -11.5 1" sizen="83.5 12" halign="right" valign="center" color="{{{Team2Color}}}5" style="EnergyBar" drawbg="0" drawblockbg="0" ratio="0.989"/>
	<quad posn="17 -2.1 5" sizen="91.5 11.5" halign="right" bgcolor="000" opacity="0.5" id="Quad_Eliminated" hidden="1" />
	<frame posn="4 0.4">
		<quad posn="-7 -3.2 2" sizen="7 7" halign="left" hidden="1" id="Quad_Tier" bgcolor="0004"/>
		<quad posn="7 -2 3" sizen="10 10" halign="center" bgcolor="0003" id="Quad_Avatar" />
		<label posn="-8 -6 3" sizen="30 9" textsize="3" halign="right" valign="center" id="Label_Name" />
		<label posn="-66 -6 3" sizen="9 6" textsize="4" halign="right" valign="center" id="Label_KD" />
		<label posn="-55 -6 3" sizen="9 5" textsize="3" halign="right" valign="center" id="Label_Acc" />
		<label posn="-49 -6 3" sizen="9 5" textsize="3" halign="right" valign="center" id="Label_Goals" />
	</frame>
	<frame posn="2 -11.8 3">
		<frame posn="1 0">
			<label posn="1 0" sizen="30 5" textsize="1" scale="0.8" textemboss="1" halign="right" valign="center" id="Label_TierName" />
			<label posn="-40 0" sizen="40 5" textsize="1" scale="0.8" textemboss="1" halign="left" valign="center" id="Label_MVP" />
		</frame>
		<frame posn="-50 0" id="Frame_PlayerRank" hidden="1">
			<format textcolor="bb8" textsize="1" scale="0.8" />
			<label posn="-15 0" sizen="10 4" halign="right" valign="center" id="Label_Progress"/>
			<label posn="0 0" sizen="10 4" halign="right" valign="center" id="Label_RankPoints" />
		</frame>
	</frame>
</framemodel>
""";
	
	for (J, 1, 2) 
	{
		for (I, 1, PlayersByCol) {
			// Do not display more than 6 players in the scores table
			declare Hidden = "";
			if (I > C_MaxPlayers) Hidden = """ hidden="1" """;
			if (J % 2 == 1) {
				ML ^= """
<frame posn="{{{PosX}}} {{{PosY+0.37}}}" {{{Hidden}}}>
	<quad posn="0 0 -3" sizen="90 11.1" id="Quad_Player_{{{K}}}" scriptevents="1" />
	<frameinstance modelid="Frame_PlayerLeft" id="Frame_Player_{{{K}}}" />
</frame>
""";
			} else {
				ML ^= """
<frame posn="{{{PosX+58.}}} {{{PosY}}}" {{{Hidden}}}>
	<quad posn="0 0 -3" sizen="90 11.1" halign="right" id="Quad_Player_{{{K}}}" scriptevents="1" />
	<frameinstance modelid="Frame_PlayerRight" id="Frame_Player_{{{K}}}" />
</frame>
""";
			}
			PosY -= 11.1;
			K += 1;
		}
		PosX += 90.5;
		PosY = 17.46;
	}
	
	return ML;
}

// Create the score table manialink string.
Text Private_CreateLayerScoresTable()
{
	declare PosY = 39;

	declare Team1Color = """{{{Teams[0].ColorPrimary.X}}} {{{Teams[0].ColorPrimary.Y}}} {{{Teams[0].ColorPrimary.Z}}}""";
	declare Team2Color = """{{{Teams[1].ColorPrimary.X}}} {{{Teams[1].ColorPrimary.Y}}} {{{Teams[1].ColorPrimary.Z}}}""";
	declare Clan1Color = TextLib::ColorToText(Teams[0].ColorPrimary);
	declare Clan2Color = TextLib::ColorToText(Teams[1].ColorPrimary);
	
return """
<!-- **************** Scores table **************** -->
<quad posn="0 {{{PosY+3}}} 21" sizen="210 97" halign="center" valign="top" image="{{{C_ImgModeDir}}}/scoreboard_base.dds" />
<quad posn="0 {{{PosY-54}}} 19" sizen="210 120" halign="center" valign="center" image="{{{C_ImgModeDir}}}/scoreboard_header.dds"/>
<quad posn="-91 -42 22" sizen="91 70.7" halign="left" valign="bottom" bgcolor="{{{Clan1Color}}}1"/>
<quad posn="91 -42 22" sizen="91 70.7" halign="right" valign="bottom" bgcolor="{{{Clan2Color}}}1"/>
<frame id="Frame_Legend">
	<format textsize="1"/>
	<label posn="-30 27.5 22" text="Obj."/>
	<label posn="-22.5 27.5 22" text="Acc."/>
	<label posn="-11 27.5 22" text="K:D"/>
	<label posn="30 27.5 22" halign="right" text="Obj."/>
	<label posn="22.5 27.5 22" halign="right" text="Acc."/>
	<label posn="10 27.5 22" halign="right" text="K:D"/>
</frame>	
<frame posn="0 {{{PosY}}} 21" id ="Frame_ScoresTable">
	<format textemboss="1" />
	<!-- **************** VS **************** -->
	<frame posn="0 -11" id="Frame_VS">
		<quad posn="-11 0" sizen="15 14" halign="right" valign="bottom" style="Emblems" substyle="#1" />
		<quad posn="11 0" sizen="15 14" valign="bottom" style="Emblems" substyle="#2" />
		<label posn="-55 1" sizen="55 5" textsize="4" halign="center" valign="bottom" scale="1.1" opacity="0.9" textemboss="1" id="Label_NameTeam1" />
		<label posn="55 1" sizen="55 5" textsize="4" halign="center" valign="bottom" scale="1.1" opacity="0.9" textemboss="1" id="Label_NameTeam2" />
	</frame>
	<!-- **************** Players Ranking **************** -->
	<frame posn="-82.25 -28.7" id="Frame_Ranking">
		{{{Private_CreatePlayersList()}}}
	</frame>
	<!-- **************** Bottom panel **************** -->
	<frame posn="0 -75.5">
		<label posn="0 -8.5 2" sizen="200 8" textsize="2" textcolor="FFF" halign="center" valign="center" textemboss="1" id="Label_Footer" />
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML

#Const C_PlayerCardWidth 90

declare CMlLabel	Label_NameTeam1;
declare CMlLabel 	Label_NameTeam2;
declare CMlFrame	Frame_Ranking;
declare CMlLabel	Label_Footer;

Text GetLevelName(Integer _Level)
{
	switch (_Level) 
	{
		case 0: return "Beginner";
		case 1: return "Wood I";
		case 2: return "Wood II";
		case 3: return "Wood III";
		case 4: return "Bronze I";
		case 5: return "Bronze II";
		case 6: return "Bronze III";
		case 7: return "Silver I";
		case 8: return "Silver II";
		case 9: return "Silver III";
		case 10: return "Gold I";
		case 11: return "Gold II";
		case 12: return "Gold III";
		case 13: return "Platinum I";
		case 14: return "Platinum II";
		case 15: return "Platinum III";
		case 16: return "Diamond I";
		case 17: return "Diamond II";
		case 18: return "Diamond III";
		case 19: return "Champion";
	}
	
	return "";
}

Text GetLevelImagePath(Integer _Level) 
{
	switch (_Level) 
	{
		case 0: return "{{{C_ImgModeDir}}}/Beginner.png";
		case 1: return "{{{C_ImgModeDir}}}/Wood_I.png";
		case 2: return "{{{C_ImgModeDir}}}/Wood_II.png";
		case 3: return "{{{C_ImgModeDir}}}/Wood_III.png";
		case 4: return "{{{C_ImgModeDir}}}/Bronze_I.png";
		case 5: return "{{{C_ImgModeDir}}}/Bronze_II.png";
		case 6: return "{{{C_ImgModeDir}}}/Bronze_III.png";
		case 7: return "{{{C_ImgModeDir}}}/Silver_I.png";
		case 8: return "{{{C_ImgModeDir}}}/Silver_II.png";
		case 9: return "{{{C_ImgModeDir}}}/Silver_III.png";
		case 10: return "{{{C_ImgModeDir}}}/Gold_I.png";
		case 11: return "{{{C_ImgModeDir}}}/Gold_II.png";
		case 12: return "{{{C_ImgModeDir}}}/Gold_III.png";
		case 13: return "{{{C_ImgModeDir}}}/Platinum_I.png";
		case 14: return "{{{C_ImgModeDir}}}/Platinum_II.png";
		case 15: return "{{{C_ImgModeDir}}}/Platinum_III.png";
		case 16: return "{{{C_ImgModeDir}}}/Diamond_I.png";
		case 17: return "{{{C_ImgModeDir}}}/Diamond_II.png";
		case 18: return "{{{C_ImgModeDir}}}/Diamond_III.png";
		case 19: return "{{{C_ImgModeDir}}}/Champion.png";
	}
	
	return "";
}

Void UpdatePlayersList(
	Text[Integer]		_Logins, 
	Text[Integer]		_Names, 
	Integer[Integer] 	_RankPoints,
	Integer[Integer] 	_Rank,
	Integer[Integer] 	_Progress,
	Integer[Integer]	_Kills,
	Integer[Integer]	_Deaths,
	Integer[Integer] 	_Goals,
	Integer[Integer]	_MVP,
	Integer[Integer]	_Acc,
	Integer				_Mode,
	Ident[Integer]		_PlayersIds
) 
{	
	for (I, 1, {{{C_MaxPlayers*2}}}) 
	{
		declare Frame_Player <=> (Frame_Ranking.GetFirstChild("Frame_Player_"^I) as CMlFrame);
		
		if (_Logins.existskey(I)) 
		{
			declare Quad_Avatar 			<=> (Frame_Player.GetFirstChild("Quad_Avatar")				as CMlQuad);
			declare Quad_Eliminated			<=> (Frame_Player.GetFirstChild("Quad_Eliminated")			as CMlQuad);
			declare Label_Name				<=> (Frame_Player.GetFirstChild("Label_Name")				as CMlLabel);
			declare Quad_Tier				<=> (Frame_Player.GetFirstChild("Quad_Tier")				as CMlQuad);
			declare Label_TierName			<=> (Frame_Player.GetFirstChild("Label_TierName")			as CMlLabel);		
			declare Label_KD				<=> (Frame_Player.GetFirstChild("Label_KD")					as CMlLabel);
			declare Label_MVP				<=> (Frame_Player.GetFirstChild("Label_MVP")				as CMlLabel);
			declare Label_Acc				<=> (Frame_Player.GetFirstChild("Label_Acc")				as CMlLabel);
			declare Label_Goals				<=> (Frame_Player.GetFirstChild("Label_Goals")				as CMlLabel);
			declare Frame_PlayerRank		<=> (Frame_Player.GetFirstChild("Frame_PlayerRank")			as CMlFrame);
			declare Label_Progress			<=> (Frame_Player.GetFirstChild("Label_Progress")			as CMlLabel);
			declare Label_RankPoints		<=> (Frame_Player.GetFirstChild("Label_RankPoints")			as CMlLabel);
			
			declare Side = 1;
			if (Label_Name.RelativePosition.X < 0) Side = -1;
			
			Frame_Player.Show();
			// Avatar
			if (_Logins.existskey(I) && _Names.existskey(I))
			{
				Quad_Avatar.Show();
				Quad_Avatar.ChangeImageUrl("file://Avatars/"^_Logins[I]^"/Default");
			}	
			else Quad_Avatar.Hide();
			
			// Name
			if (_Names.existskey(I)) Label_Name.SetText(_Names[I]);
			else Label_Name.SetText("");

			if (_PlayersIds.existskey(I) && Players.existskey(_PlayersIds[I]))
			{
				declare Player <=> Players[_PlayersIds[I]];
				
				// Tier Image
				declare persistent Loadouts_UserRank for Player.User = 0;			
				declare TierPath = GetLevelImagePath(Loadouts_UserRank);
				if (TierPath != "") 
				{
					Quad_Tier.Show();
					Quad_Tier.ImageUrl = TierPath;
				} 
				else Quad_Tier.Hide();
			}
			// Rank
			if (_Rank.existskey(I)) Label_TierName.SetText(TL::Compose("%1: %2", "Rank", GetLevelName(_Rank[I])));
		// Stats
			declare Kills = 0;
			declare Deaths = 0;
			// K/D
			if (_Kills.existskey(I)) Kills = _Kills[I];
			else Kills = 0;
			if (_Deaths.existskey(I)) Deaths = _Deaths[I];
			else Deaths = 0;
			Label_KD.SetText(""^Kills^":"^Deaths);
			// MVP
			if (_MVP.existskey(I))
			{
				if(_MVP[I] == 1) Label_MVP.SetText("MVP in 1 round");
				else Label_MVP.SetText("MVP in "^_MVP[I]^" rounds");
			}	
			else Label_MVP.SetText("");
			// Accuracy
			if (_Acc.existskey(I)) Label_Acc.SetText(_Acc[I]^"%");
			else Label_Acc.SetText("0%");
			// Goals
			if (_Goals.existskey(I)) Label_Goals.SetText(_Goals[I]^"");
			else Label_Goals.SetText("0");
				
			// Rank points
			if (_Mode == {{{C_SequencePodium}}} && _Progress.existskey(I)) 
			{
				Frame_PlayerRank.Show();
				
				if (_Progress[I] >= 0) Label_Progress.SetText("$9f0+"^_Progress[I]^" RP");
				else Label_Progress.SetText("$f50"^_Progress[I]^" RP");
				
				if (_RankPoints.existskey(I)) Label_RankPoints.SetText(_RankPoints[I]^" RP");
				else Label_RankPoints.SetText("0 RP");
			} 
			else Frame_PlayerRank.Hide();
		}
		else Frame_Player.Hide();
	}
}

Void UpdateGameInfo() 
{
	declare netread Net_LayerST_CurrentRound for UI = 0;
	declare netread Net_LayerST_MaxRounds for UI = 0;
	declare netread Net_LayerST_Additional for UI = False;
	if(Net_LayerST_Additional) Label_Footer.SetText(TL::Compose(_("Round: %1/%2 | Points to win: %3 | Remaining rounds: %4"), TL::ToText(Net_LayerST_CurrentRound), TL::ToText(Net_LayerST_MaxRounds*2+1), TL::ToText(Net_LayerST_MaxRounds+1), TL::ToText(Net_LayerST_MaxRounds*2-Net_LayerST_CurrentRound)));
	else Label_Footer.SetText(TL::Compose(_("Round: %1/%2 | Points to win: %3 | Remaining rounds: %4"), TL::ToText(Net_LayerST_CurrentRound), TL::ToText(Net_LayerST_MaxRounds*2), TL::ToText(Net_LayerST_MaxRounds+1), TL::ToText(Net_LayerST_MaxRounds*2-Net_LayerST_CurrentRound)));
}

Void UpdatePlayersStatus(Boolean _Forced) {
	declare netread Text[Integer] Net_LayerST_Logins for UI;
	
	foreach (Player in Players) {
		declare PrevSpawnStatus for Player = CSmPlayer::ESpawnStatus::Spawned;
		if (PrevSpawnStatus != Player.SpawnStatus || _Forced) {
			PrevSpawnStatus = Player.SpawnStatus;
			
			if (!Net_LayerST_Logins.exists(Player.Login)) continue;
			
			declare Frame_Player <=> (Frame_Ranking.GetFirstChild("Frame_Player_"^Net_LayerST_Logins.keyof(Player.Login)) as CMlFrame);
			if (Frame_Player == Null) continue;
			
			declare Quad_Eliminated <=> (Frame_Player.GetFirstChild("Quad_Eliminated")	as CMlQuad);
			declare netread Integer Net_LayerST_Mode for UI;
			
			if (Net_LayerST_Mode == {{{C_SequencePlaying}}} && UI.UISequence == CUIConfig::EUISequence::Playing) {
				if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
					Quad_Eliminated.Show();
				} else {
					Quad_Eliminated.Hide();
				}
			} else {
				Quad_Eliminated.Hide();
			}
		}
	}
}

main() {
	Label_NameTeam1			<=> (Page.GetFirstChild("Label_NameTeam1")		as CMlLabel);
	Label_NameTeam2			<=> (Page.GetFirstChild("Label_NameTeam2")		as CMlLabel);
	Frame_Ranking			<=> (Page.GetFirstChild("Frame_Ranking")		as CMlFrame);
	Label_Footer			<=> (Page.GetFirstChild("Label_Footer")			as CMlLabel);
	declare Quad_Clan1Color	<=> (Page.GetFirstChild("Quad_Clan1Color")		as CMlQuad);
	declare Quad_Clan2Color	<=> (Page.GetFirstChild("Quad_Clan2Color")		as CMlQuad);
	declare Frame_Legend	<=> (Page.GetFirstChild("Frame_Legend")			as CMlFrame);

	declare netread Integer				Net_LayerST_Update			for UI;
	declare netread Text[Integer]		Net_LayerST_Logins			for UI;
	declare netread Integer[Integer]	Net_LayerST_RankPoints		for UI;
	declare netread Integer[Integer]	Net_LayerST_Rank			for UI;
	declare netread Integer[Integer]	Net_LayerST_Progress		for UI;
	declare netread Integer[Integer]	Net_LayerST_Kills			for UI;
	declare netread Integer[Integer]	Net_LayerST_Deaths			for UI;
	declare netread Integer[Integer]	Net_LayerST_Goals			for UI;
	declare netread Integer[Integer]	Net_LayerST_MVP				for UI;
	declare netread Integer[Integer]	Net_LayerST_Acc				for UI;
	declare netread Integer				Net_LayerST_Mode			for UI;
	
	declare Text[Integer]		Logins;
	declare Text[Integer]		Names;
	declare Integer				Order;
	declare Ident[Integer]		PlayersIds;
	
	declare LastUpdate = -1;
	declare PrevUISequence = CUIConfig::EUISequence::None;
	declare PrevSpecCount = 0;
	declare PrevClan1Name = "";
	declare PrevClan2Name = "";
	declare PrevClan1Color = <0., 0., 1.>;
	declare PrevClan2Color = <1., 0., 0.>;

	while (True) {
		yield;
		
		if (InputPlayer == Null) continue;
		if (!PageIsVisible) continue;
		
		if (PrevClan1Name != Teams[0].ColorizedName) {
			PrevClan1Name = Teams[0].ColorizedName;
			if (Teams[0].ColorizedName == "$<$00fBlue$>") Label_NameTeam1.SetText("$<$fffBlue$>");
			else Label_NameTeam1.SetText(Teams[0].ColorizedName);
		}
		if (PrevClan2Name != Teams[1].ColorizedName) {
			PrevClan2Name = Teams[1].ColorizedName;
			if (Teams[1].ColorizedName == "$<$f00Red$>") Label_NameTeam2.SetText("$<$fffRed$>");
			else Label_NameTeam2.SetText(Teams[1].ColorizedName);
		}
		if (PrevClan1Color != Teams[0].ColorPrimary) {
			PrevClan1Color = Teams[0].ColorPrimary;
			Quad_Clan1Color.Colorize = Teams[0].ColorPrimary;
		}
		if (PrevClan2Color != Teams[1].ColorPrimary) {
			PrevClan2Color = Teams[1].ColorPrimary;
			Quad_Clan2Color.Colorize = Teams[1].ColorPrimary;
		}
		
		if (LastUpdate != Net_LayerST_Update) {
			LastUpdate = Net_LayerST_Update;
			
			UpdatePlayersStatus(True);
			
			Logins = Net_LayerST_Logins;
			for (I, 1, {{{C_MaxPlayers*2}}}) {
				declare Frame_Player <=> Frame_Ranking.GetFirstChild("Quad_Player_"^I);
				if (Frame_Player == Null) continue;
				declare SpectateLogin for Frame_Player = "";
				if (!Logins.existskey(I)) SpectateLogin = "";
				else SpectateLogin = Logins[I];				
			}
			
			Names.clear();
			foreach (Score in Scores) {
				if (Logins.exists(Score.User.Login)) {
					declare Key = Logins.keyof(Score.User.Login);
					Names[Key] = Score.User.Name;
				}
			}
			foreach (Player in Players) {
				if (Logins.exists(Player.Login)) {
					declare Key = Logins.keyof(Player.Login);
					PlayersIds[Key] = Player.Id;
				}
			}
			
			UpdatePlayersList(
				Logins, 
				Names, 
				Net_LayerST_RankPoints, 
				Net_LayerST_Rank,
				Net_LayerST_Progress,
				Net_LayerST_Kills, 
				Net_LayerST_Deaths,
				Net_LayerST_Goals,
				Net_LayerST_MVP,
				Net_LayerST_Acc,
				Net_LayerST_Mode,
				PlayersIds
			);
			
			UpdateGameInfo();
		}
		
		if (PrevUISequence != UI.UISequence) {
			PrevUISequence = UI.UISequence;
			
			if (UI.UISequence != CUIConfig::EUISequence::Playing) {
				for (I, 1, {{{C_MaxPlayers*2}}}) {
					declare Frame_Player	<=> (Frame_Ranking.GetFirstChild("Frame_Player_"^I)	as CMlFrame);
					declare Quad_Eliminated <=> (Frame_Player.GetFirstChild("Quad_Eliminated") as CMlQuad);
					Quad_Eliminated.Hide();
				}
			}
			
			UpdatePlayersStatus(True);
		}
		
		if (UI.UISequence == CUIConfig::EUISequence::Playing) UpdatePlayersStatus(False);
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlEvent::Type::MouseClick) {
				if (IsSpectatorMode) {
					declare SpectateLogin for Event.Control = "";
					if (SpectateLogin != "") SetSpectateTarget(SpectateLogin);
				}
			}
		}
	}
}
--></script>
""";
}

Void Load()
{
	Layers::Create(C_LayerName, Private_CreateLayerScoresTable());
	Layers::SetType(C_LayerName, CUILayer::EUILayerType::ScoresTable);

	UIManager.UIAll.ScoreTableOnlyManialink = True;
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
}

Void Unload()
{
	Layers::Detach(C_LayerName);
	Layers::Destroy(C_LayerName);
}

Void Build()
{
	Layers::Attach(C_LayerName);
	Layers::Update(C_LayerName, Private_CreateLayerScoresTable());
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
}

Void UpdateST(Integer _Mode, Integer _CurrentRound, Integer _MaxRounds, Boolean _Additional)
{
	declare Logins			= Text[Integer];
	declare Kills			= Integer[Integer];
	declare Deaths			= Integer[Integer];
	declare Goals 			= Integer[Integer];
	declare MVP				= Integer[Integer];
	declare Acc				= Integer[Integer];
	declare RankPoints 		= Integer[Integer];
	declare Progression 	= Integer[Integer];
	declare Rank 			= Integer[Integer];
	declare ClansOrders 	= Ident[Integer][Integer];
	ClansOrders[1] 			= [1 => NullId];
	ClansOrders[2] 			= [1 => NullId];
	declare Counter 		= [1=>1, 2=>1];
	foreach(Player in AllPlayers)
	{
		switch(Player.CurrentClan)
		{
			case 1:
			{
				if(Counter[1] <= C_MaxPlayers)
				{
					ClansOrders[1][Counter[1]] = Player.Id;
					Counter[1] += 1;
				}	
			}
			case 2:
			{
				if(Counter[2] <= C_MaxPlayers)
				{
					ClansOrders[2][Counter[2]] = Player.Id;
					Counter[2] += 1;
				}	
			}
		}
	}
	for (I, 1, 2) 
	{
		declare J = 1;
		foreach (Slot => Id in ClansOrders[I]) 
		{
			if (Players.existskey(Id)) 
			{
				declare Key = J+((I-1)*C_MaxPlayers);
				declare Player <=> Players[Id];
				Logins[Key] = Player.Login;
				if (Player.Score != Null) 
				{
					declare CurrentKills for Player.Score = 0;
					declare CurrentDeaths for Player.Score = 0;
					declare CurrentCapGoals for Player.Score = 0;
					declare CurrentMVP for Player.Score = 0;
					declare CurrentAcc for Player.Score = 0;
					if(_Mode == 2) Progression[Key] = Rank::GetUserPointsProgression(Player.User);
					else Progression[Key] = 0;
					RankPoints[Key] 	= Rank::GetUserRankPoints(Player.User);
					Rank[Key] 			= Rank::GetUserRank(Player.User);
					Goals[Key] 			= CurrentCapGoals;
					Kills[Key] 			= CurrentKills;
					Deaths[Key] 		= CurrentDeaths;
					MVP[Key] 			= CurrentMVP;
					Acc[Key] 			= CurrentAcc;
				}
			}
			J += 1;
		}
	}

	foreach (Player in AllPlayers) 
	{
		declare UI <=> UIManager.GetUI(Player);
		if (UI == Null) continue;
	
		declare netwrite Integer			Net_LayerST_Update			for UI;
		declare netwrite Text[Integer]		Net_LayerST_Logins			for UI;
		declare netwrite Integer[Integer]	Net_LayerST_RankPoints		for UI;
		declare netwrite Integer[Integer]	Net_LayerST_Rank			for UI;
		declare netwrite Integer[Integer]	Net_LayerST_Progress		for UI;
		declare netwrite Integer[Integer]	Net_LayerST_Kills			for UI;
		declare netwrite Integer[Integer]	Net_LayerST_Deaths			for UI;
		declare netwrite Integer[Integer]	Net_LayerST_Goals			for UI;
		declare netwrite Integer[Integer]	Net_LayerST_MVP				for UI;
		declare netwrite Integer[Integer]	Net_LayerST_Acc				for UI;
		declare netwrite Integer			Net_LayerST_Mode			for UI;
		declare netwrite Integer			Net_LayerST_CurrentRound	for UI;
		declare netwrite Integer			Net_LayerST_MaxRounds 		for UI;
		declare netwrite Boolean			Net_LayerST_Additional 		for UI;
	
		Net_LayerST_Update			= Now;
		Net_LayerST_Logins			= Logins;
		Net_LayerST_RankPoints 		= RankPoints;
		Net_LayerST_Rank 			= Rank;
		Net_LayerST_Progress 		= Progression;
		Net_LayerST_Kills			= Kills;
		Net_LayerST_Deaths			= Deaths;
		Net_LayerST_Goals			= Goals;
		Net_LayerST_MVP				= MVP;
		Net_LayerST_Acc				= Acc;
		Net_LayerST_Mode			= _Mode;
		Net_LayerST_CurrentRound 	= _CurrentRound;
		Net_LayerST_MaxRounds 		= _MaxRounds;
		Net_LayerST_Additional 		= _Additional;
	}
}