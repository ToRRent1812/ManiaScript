// VANILLA MODE: Free for all where players are fighting to be the last man standing until spawn wave
#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const	CompatibleMapTypes	"CountdownArena"
#Const	Version				"2014-09-21"
#Const	ScriptName			"Countdown.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/Nadeo/Manialink.Script.txt" as MLink
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Map.Script.txt" as Map
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen

#Setting S_BasicCheckTime		10		as _("First spawn wave deploy time")
#Setting S_CheckInc				5		as _("Time incrementation for next spawn wave")
#Setting S_PointsToWin 			3 		as _("Number of rounds, player need to win a map")
#Setting S_UseLevelProgression	True 	as _("Enable Evolution system")
#Setting S_Bots 				4 		as _("Fill up server with bots")
#Setting S_UseDynamicColors		True	as _("Change glow color when round is coming to the end?")
#Setting S_MarkersWhen			2 		as _("How many players must be alive to show markers")
					//     < 	20           >  +30  +40  +50  +60  +70  +85  +100 +115 +130 +145 +165  +185  +205  +225  +245   +270  +295  +320  +345  +370 +400  +430   +460  +490  +520  +560  +600  +640  +680  +720  +770  +820   +870    +920   +970  +1030  +1090  +1150 +1210  +1270   +1340   +1410  +1480 +1550  +1620
		    		//   0, 1,  2,  3,  4,  5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,   18,   19,    20,   21,   22,   23,   24,   25,  26,   27,    28,   29,   30,   31,   32,   33,   34,   35,   36,   37,    38,     39,    40,   41,    42,    43,   44,    45,      46,    47,    48,   49,    50
#Const C_Levels 		[0, 20, 40, 60, 80, 100, 130, 170, 220, 280, 350, 435, 535, 650, 780, 925, 1090, 1275, 1480, 1705, 1950, 2220, 2515, 2835, 3180, 3550, 3950, 4380, 4840, 5330, 5850, 6410, 7010, 7650, 8330, 9050, 9820, 10640, 11510, 12430, 13400, 14430, 15520, 16670, 17880, 19150, 20490, 21900, 23380, 24930, 26550]
#Const C_MaxLevel 		50
#Const C_XPForHit 		1
#Const C_XPForKill 		5
#Const C_XPForSurvive 	5
#Const C_XPForCapture 	10
#Const C_XPForWin 		50

/*
 ...UL = Specific value for specific upgrade level
 ...PPL = Skill points needed for upgrade level
*/

#Const C_StaminaUL 		[0.6, 0.7, 0.8, 0.9, 1.]
#Const C_StaminaPPL		2 // 8

#Const C_JumpUL 		[0.8, 0.85, 0.9, 0.95, 1.]
#Const C_JumpPPL		1 // 4

#Const C_ArmorUL 		[3, 4, 5, 6]
#Const C_ArmorPPL		4 // 12

#Const C_ArmorRegenUL 	[45, 30, 25, 20, 15]
#Const C_ArmorRegenPPL  3 // 12

#Const C_AmmoSpeedUL 	[0.6, 0.65, 0.7, 0.75, 0.8]
#Const C_AmmoSpeedPPL	3 // 12

#Const C_AmmoUL 		[4, 5, 6, 7]
#Const C_AmmoPPL		3 // 9

#Const Description _("TYPE: FFA\nRULES: Be the last man standing to win the round.")

#Const C_PlayerDefaultGlow <1., 0.8, 0.5>

declare Integer		G_PlayersAlive;			// How many players are alive
declare Integer 	G_Time;					// Current Time bonus
declare Ident[]		G_SpawnsList;			// Id of all the landmarks with a player spawn of the map
declare Ident		G_LatestSpawnId;		// Id of the last landmark used
declare Integer 	G_ReinforcementWaves; 	// Current wave number
declare Integer 	G_LastUpdate;
declare Integer 	G_LastPlayerArrayUpdate;
declare Integer[Integer][Text] G_PlayerStats;		// Custom stats in one array [Player.Login][Stat Number]

***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

***InitServer***
***
// Use rounds, not turns
MB_UseSectionRound		= True;
MB_UseSectionTurn		= False;
MB_UsePlayerClublinks	= False;
***

***StartServer***
***
assert(S_BasicCheckTime > 0, "S_BasicCheckTime must be bigger than 0");
assert(S_PointsToWin > 0, "S_PointsToWin must be bigger than 0");
UseClans			= False; // FFA
UseLaserSkewering	= False; // No multi laser kills
UseAmmoBonusOnHit	= True; // Ammo bonus after hit

declare ModeName = "Countdown";
declare ModeObjectives = TextLib::Compose(_("$<%11. $>The goal of this mode is to be the last man standing until countdown will show 0:00.\n$<%12. $>Players are spawning at the end of the countdown.\n$<%13. $>Player with %2 points wins the map."), "$"^SpawnScreen::GetModeColor(), TextLib::ToText(S_PointsToWin));
declare ModeConditions = TextLib::Compose(_("$<%11. $>You are playing with rockets, but you can earn other weapons by standing on special block.\n$<%12. $>Spawn time is increasing after every wave. (+%2 sec.)"), "$"^SpawnScreen::GetModeColor(), TextLib::ToText(S_CheckInc));

SpawnScreen::AddSubsection(_("Type"), _("Free For All"), 0.);
SpawnScreen::AddSubsection(_("Objectives"), ModeObjectives, 25.);
SpawnScreen::AddSubsection(_("Conditions"), ModeConditions, 65.);
SpawnScreen::CreatePrettyRules(ModeName);
SpawnScreen::CreateScores("Score.Points");
SpawnScreen::CreateMapInfo();
if(S_UseLevelProgression) ModeStatusMessage = _("TYPE: FFA\nRULES: Be the last man standing to win the round.\nEvolution System: $0c0ENABLED");
else ModeStatusMessage = _("TYPE: FFA\nRULES: Be the last man standing to win the round.\nEvolution System: $c00DISABLED");
SM::SetupDefaultVisibility();

if(S_UseLevelProgression) 
{
	Layers::Create("LevelProgresion");
	Layers::Create("RulesReminder", UpdateLayerRulesReminderXP());
	Layers::Create("XPBonus");
}
else Layers::Create("RulesReminder", UpdateLayerRulesReminder());
Layers::Create("AlivePlayers");
//Layers::Create("SpecView", UpdateLayerSpecView());
Layers::SetType("RulesReminder", CUILayer::EUILayerType::CutScene);
Layers::Attach("RulesReminder");

ST2::SetStyle("LibST_SMBaseOneColumn");
ST2::SetStyle("LibST_SMWithLegends");
ST2::SetStyle("LibST_SMBasePoints");
if(S_UseLevelProgression) ST2::CreateCol("ST_Level", _("Level"), "0", 3.5, 70.);
ST2::CreateCol("ST_Acc", _("Accuracy"), "0%", 3.5, 80.);
ST2::CreateCol("ST_KD", _("K:D"), "0:0", 3.5, 90.);
ST2::CreateCol("ST_SW", _("Longest lifetime"), "0 Waves", 5., 75.);
ST2::SetColLegend("LibST_SMRoundPoints", _("Hits"));
ST2::SetColLegend("LibST_SMPoints", _("Rounds"));
ST2::SetColTextSize("LibST_SMPoints", 4.5);
ST2::SetColTextSize("LibST_SMRoundPoints", 2.5);
//ST2::SetColTextStyle("LibST_SMRoundPoints", "$2f0");
ST2::SetFormat(1, 6);
ST2::SetFooterText(TextLib::Compose(_("Rounds to win: %1"), TextLib::ToText(S_PointsToWin)));
MB_SetScoresTableStyleFromXml(S_ScoresTableStylePath);
ST2::Build("SM");
***

***InitMap***
***
declare CSmPlayer	MapWinner;		// who win the map
MB_UseIntro = False;
***

***StartMap***
***
G_LatestSpawnId = NullId;
Users_SetNbFakeUsers(S_Bots, 0); // Set bots
Score::MatchBegin();

// Reset player data
foreach(Player in AllPlayers)
{
	Player.Score.Points = 0;
	declare Acc for Player.Score = 0;
	Acc = 0;
	declare Fired for Player.Score = 0;
	Fired = 0;
	declare Hits for Player.Score = 0;
	Hits = 0;
	declare Kills for Player.Score = 0;
	Kills = 0;
	declare WaveKills for Player.Score = 0;
	WaveKills = 0;
	declare SurvivedWaves for Player.Score = 0;
	SurvivedWaves = 0;
	declare LongestSurvive for Player.Score = 0;
	LongestSurvive = 0;
	declare Deaths for Player.Score = 0;
	Deaths = 0;
	if(S_UseLevelProgression)
	{
		declare Level for Player.Score = 0;
		Level = 0;
		declare XP for Player.Score = 0;
		XP = 0;
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) continue;
		// Net_PlayerLevel + Net_PlayerXP = Server Side
		declare netwrite Net_PlayerLevel for UI = 0;
		Net_PlayerLevel = 0;
		declare netwrite Net_PlayerXP for UI = 0;
		Net_PlayerXP = 0;
		declare netwrite Net_ServerWantReset for UI = 0;
		Net_ServerWantReset = Now;
	}
}	
ST2::ClearScores();
SM::SetupDefaultVisibility();

// Remove color linking
foreach (Base in MapBases) {
	Base.Clan = 0;
	Base.IsActive = True;
}
SM::UnspawnAllPlayers();
StartTime = Now;
DoWarmUp();
***

***InitRound***
***
declare CSmPlayer 		RoundWinner; 			// Who win the round
declare Boolean 		ActivePole;				// Is Pole active?
declare CSmPlayer 		FirstOnGoal;			// Who was the first on pole
declare Integer 		InvincibilityEndTime; 	// Time to remove spawn protection
***

***StartRound***
***
G_PlayerStats.clear();
FirstOnGoal = Null;
G_Time = S_BasicCheckTime*1000;
G_LastUpdate = 0;
G_LastPlayerArrayUpdate = 0;
G_ReinforcementWaves = 0;
RoundWinner = Null;
ActivePole = False;

Mode::Synchro_DoBarrier();
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
Score::RoundBegin();
InitPole();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
Mode::PlaySound(CUIConfig::EUISound::StartRound, 0);
Layers::Update("AlivePlayers", UpdateLayerPlayers(0));
Message::CleanAllMessages();
Message::SendBigMessage(TextLib::Compose(_("Round %1"), TextLib::ToText(MB_SectionRoundNb)), 5000, 0, CUIConfig::EUISound::StartRound, 3);
MB_Sleep(4000);
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.UIAll.CountdownEndTime = Now + G_Time;
StartTime = Now;
RespawnPlayers();
// Run the Spawn protection
InvincibilityEndTime = StartTime + S_BasicCheckTime*1000;
UsePvPCollisions = False;
UsePvPWeapons = False;
Message::SendStatusMessage(_("Players are invincible"), InvincibilityEndTime - Now, 1);
if(S_UseLevelProgression)
{
	Layers::Update("XPBonus", UpdateLayerBonus());
	Layers::Update("LevelProgresion", UpdateLayerProgression());
	foreach(Player in Players) Layers::Attach("LevelProgresion", Player); // Attach evolution system only to players
}
/*foreach(Spectator in Spectators)
{
	if(Layers::IsMissing("SpecView", Spectator)) Layers::Attach("SpecView", Spectator);
}*/
***

***Yield***
***
Message::Loop();
***

***OnPlayerAdded***
***
//Init player data
Player.Score.Points = 0;
declare Acc for Player.Score = 0;
Acc = 0;
declare Fired for Player.Score = 0;
Fired = 0;
declare Hits for Player.Score = 0;
Hits = 0;
declare Kills for Player.Score = 0;
Kills = 0;
declare WaveKills for Player.Score = 0;
WaveKills = 0;
declare SurvivedWaves for Player.Score = 0;
SurvivedWaves = 0;
declare LongestSurvive for Player.Score = 0;
LongestSurvive = 0;
declare Deaths for Player.Score = 0;
Deaths = 0;
if(S_UseLevelProgression)
{
	declare Level for Player.Score = 0;
	declare XP for Player.Score = 0;
	declare UI <=> UIManager.GetUI(Player);
	if(UI == Null) continue;
	declare netwrite Net_ServerWantReset for UI = 0;
	Net_ServerWantReset = Now;
	Layers::Attach("LevelProgresion", Player);
}
***

***OnNewSpectator***
***
Layers::Detach("LevelProgresion", Spectator);
***

***PlayLoop***
***
ManageBots();
// Spawn protection
if (InvincibilityEndTime > 0 && InvincibilityEndTime <= Now) {
	InvincibilityEndTime = -1;
	UsePvPCollisions = True;
	UsePvPWeapons = True;
}

// Update Players Alive variable
if(G_LastPlayerArrayUpdate + 400 < Now)
{
	G_LastPlayerArrayUpdate = Now;
	G_PlayersAlive = 0;
	foreach(Player in Players)
	{
		if(Player.Armor > 0) // If player is really alive, count to variable and pick as RoundWinner(If there is only 1 alive player, he will be a round winner)
		{
			G_PlayersAlive += 1;
			RoundWinner <=> Player;
		}
	}
	if(G_PlayersAlive == 1) // Last Man Standing = End of the round
	{
		Message::CleanBigMessages();
		MB_StopRound = True;
	}
	else if(G_PlayersAlive <= S_MarkersWhen) BuildHuntingMarkers();
	Layers::Update("AlivePlayers", UpdateLayerPlayers(G_PlayersAlive));
}

if(G_LastUpdate + 1000 < Now)
{
	G_LastUpdate = Now;
	foreach(Player in Players)
	{
		if(S_UseDynamicColors)
		{
			//Switch glows color
			switch(G_PlayersAlive)
			{
				case 2: Player.ForceColor = <1., 0.45, 0.05>;
				case 3: Player.ForceColor = <1., 0.6, 0.2>;
				case 4: Player.ForceColor = <1., 0.75, 0.35>;
				default: Player.ForceColor = C_PlayerDefaultGlow;
			}
		}	
		// Read or Init player statistics
		declare Fired for Player.Score = 0;
		declare Hits for Player.Score = 0;
		declare Acc for Player.Score = 0;
		declare Kills for Player.Score = 0;
		declare Deaths for Player.Score = 0;
		if(Fired > 0) Acc = 100*Hits/Fired;
		else Acc = 0;
		if(Acc > 100) Acc = 100 - Hits + Fired;
		ST2::SetColValue("ST_Acc", Player.Score, TextLib::ToText(Acc)^"%");
		ST2::SetColValue("ST_KD", Player.Score, TextLib::ToText(Kills)^":"^TextLib::ToText(Deaths));
		if(G_PlayerStats.existskey(Player.Login))
		{
			G_PlayerStats[Player.Login][0] = Kills;
			G_PlayerStats[Player.Login][1] = Deaths;
			G_PlayerStats[Player.Login][2] = Acc;
		}	
		declare UI <=> UIManager.GetUI(Player);
		if(UI != Null)
		{
			if(S_UseLevelProgression)
			{
				//if(!Layers::IsMissing("SpecView", Player)) Layers::Detach("SpecView", Player);
				if(Player.RequestsSpectate)
				{
					Layers::Detach("LevelProgresion", Player); // If someone is going to spectator view - detach Level progression
					//if(Layers::IsMissing("SpecView", Player)) Layers::Attach("SpecView", Player);
				}	
				if(Layers::IsMissing("LevelProgresion", Player)) Layers::Attach("LevelProgresion", Player); // If playable player doesn't have evolution layer for unknown reason - Attach
				declare Level for Player.Score = 0;
				declare XP for Player.Score = 0;
				ST2::SetColValue("ST_Level", Player.Score, TextLib::ToText(Level)^"");
			
				declare netwrite Net_PlayerLevel for UI = 0;
				Net_PlayerLevel = Level;
				declare netwrite Net_PlayerXP for UI = 0;
				Net_PlayerXP = XP;
				declare netread Net_ClientDoReset for UI = 0;
				declare netwrite Net_ServerWantReset for UI = 0;
				if(Net_ClientDoReset > 0) Net_ServerWantReset = 0;
			}
		}	
	}

	foreach(Player in Players)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) continue;
		declare netwrite Integer[Integer][Text] Net_PlayerStats for UI;
		Net_PlayerStats = G_PlayerStats;
	}
}

// New wave is coming right now!
if (Now == UIManager.UIAll.CountdownEndTime) 
{
	UIManager.UIAll.MarkersXML = "";
	G_ReinforcementWaves += 1;
	if(G_ReinforcementWaves == 1) Layers::Attach("AlivePlayers");
	foreach(Player in Players)
	{
		declare SurvivedWaves for Player.Score = 0;
		declare LongestSurvive for Player.Score = 0;
		if(Player.Armor > 0 && G_ReinforcementWaves > 0) 
		{
			SurvivedWaves += 1;
			AddPlayerXP(Player, C_XPForSurvive*SurvivedWaves, "survived wave");
		}
		else SurvivedWaves = 0;
		declare WaveKills for Player.Score = 0;
		WaveKills = 0;
		
		if(SurvivedWaves > LongestSurvive)
		{
			LongestSurvive = SurvivedWaves;
			declare Suffix = "";
			if(LongestSurvive == 1) Suffix = "Wave";
			else Suffix = "Waves";
			ST2::SetColValue("ST_SW", Player.Score, TextLib::ToText(LongestSurvive)^" "^Suffix);
		}
		if(G_PlayerStats.existskey(Player.Login))
		{
			G_PlayerStats[Player.Login][4] = SurvivedWaves;
			G_PlayerStats[Player.Login][5] = LongestSurvive;
		}	

		switch(Player.User.Language)
		{
			case "pl": Message::SendBigMessage(Player, TextLib::Compose(_("%1 fala odrodzona!"), TextLib::ToText(G_ReinforcementWaves)), 2500, 1);
			default: Message::SendBigMessage(Player, TextLib::Compose(_("Wave %1 spawned!"), TextLib::ToText(G_ReinforcementWaves)), 2500, 1);
		}
		
		declare UI <=> UIManager.GetUI(Player);
		if(UI != Null && S_UseLevelProgression)
		{
			declare netwrite Net_XPBonus for UI = 1;
			declare netwrite Net_SWaves for UI = 0;
			Net_SWaves = SurvivedWaves;
			if(SurvivedWaves < 3) Net_XPBonus = 1;
			else if(SurvivedWaves >= 3 && SurvivedWaves < 6) Net_XPBonus = 2; // 3 to 5 waves
			else if(SurvivedWaves >= 6 && SurvivedWaves < 9) Net_XPBonus = 3; // 6 to 8 waves
			else if(SurvivedWaves >= 9 && SurvivedWaves < 12) Net_XPBonus = 4; // 9 to 11 waves
			else if(SurvivedWaves >= 12) Net_XPBonus = 5; // More than 12
			
			if(Net_XPBonus > 1) Layers::Attach("XPBonus", Player);
			else Layers::Detach("XPBonus", Player);
		}
	}
	foreach(Spectator in Spectators)
	{
		switch(Spectator.User.Language)
		{
			case "pl": Message::SendBigMessage(Spectator, TextLib::Compose(_("%1 fala odrodzona!"), TextLib::ToText(G_ReinforcementWaves)), 3500, 1);
			default: Message::SendBigMessage(Spectator, TextLib::Compose(_("Wave %1 spawned!"), TextLib::ToText(G_ReinforcementWaves)), 3500, 1);
		}
	}
	//Message::SendBigMessage(TextLib::Compose(_("Wave %1 spawned!"), TextLib::ToText(G_ReinforcementWaves)), 3000, 1);
	RespawnPlayers();
	G_Time += S_CheckInc * 1000; // Increase time for next spawn
	UIManager.UIAll.CountdownEndTime += G_Time;
	ActivePole = True;
	FirstOnGoal = Null;
	Mode::PlaySound(CUIConfig::EUISound::PhaseChange, 1);
	foreach (Goal in MapLandmarks_Gauge) 
	{
		if(Goal.Sector != Null)
		{
			Goal.Gauge.Max		= G_Time;
			Goal.Gauge.Value	= G_Time;
			Goal.Gauge.Speed	= -1;
			Goal.Gauge.Clan 	= 0;
			Goal.Gauge.Captured = False;
		}	
	}
}

// Check who was the first on the active pole
foreach (Goal in MapLandmarks_Gauge) 
{
	if(Goal.Sector != Null && ActivePole)
	{
		if (Goal.Sector.PlayersIds.count > 0) 
		{
			foreach (PlayerId in Goal.Sector.PlayersIds) 
			{
				declare Player <=> Players[PlayerId];
				FirstOnGoal = Player;
			}
		}
	}	
}

// Give him full armor + full ammo + XP
foreach (Goal in MapLandmarks_Gauge) 
{
	if(Goal.Sector != Null)
	{
		if(FirstOnGoal != Null)
		{
			// Player capture the active pole
			Goal.Gauge.Value = 0;
			declare SpawnArmor for FirstOnGoal = 400;
			declare SpawnAmmo for FirstOnGoal = C_AmmoUL[0];
			FirstOnGoal.Armor = SpawnArmor;
			SetPlayerAmmo(FirstOnGoal, CSmMode::EWeapon::Rocket, SpawnAmmo);
			AddPlayerXP(FirstOnGoal, C_XPForCapture, "capture");
			FirstOnGoal = Null;
			ActivePole = False;
		}
	}
}			

//Events
foreach(Event in PendingEvents)
{
	switch(Event.Type)
	{
		case CSmModeEvent::EType::OnShoot:
		{
			if(Event.Shooter == Null) Discard(Event);
			
			declare Fired for Event.Shooter.Score = 0;
			Fired += 1;
		}
		case CSmModeEvent::EType::OnArmorEmpty:
		{
			if(Event.Victim == Null) Discard(Event);

			//Message::SendStatusMessage(TextLib::Compose(_("$<%1$> eliminated!"), Event.Victim.Name), 2500, 1, CUIConfig::EUISound::PlayerEliminated, 0);
			
			declare Kills for Event.Shooter.Score = 0;
			Kills += 1;
			declare WaveKills for Event.Shooter.Score = 0;
			WaveKills += 1;
			declare UI <=> UIManager.GetUI(Event.Victim);
			if(UI != Null)
			{
				declare netwrite Net_XPBonus for UI = 1;
				Net_XPBonus = 1;
				Layers::Detach("XPBonus", Event.Victim);
			}
			AddPlayerXP(Event.Shooter, C_XPForKill*WaveKills, "elimination");
			declare Deaths for Event.Victim.Score = 0;
			Deaths += 1;

			XmlRpc::OnArmorEmpty(Event);
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnHit:
		{
			if(Event.Shooter == Null || Event.Victim == Null) Discard(Event);
			else 
			{
				if (Event.Shooter != Event.Victim)
				{
					if(Event.WeaponNum == GetWeaponNum(CSmMode::EWeapon::Laser) || Event.WeaponNum == GetWeaponNum(CSmMode::EWeapon::Arrow))
					{
						Event.ShooterPoints += 1;
						Event.Damage += 100;
					}
					else Score::AddPoints(Event.Shooter, Event.Damage/100);
					declare Hits for Event.Shooter.Score = 0;
					Hits += 1;
					AddPlayerXP(Event.Shooter, C_XPForHit, "");
					XmlRpc::OnHit(Event);
					PassOn(Event);
				}	
			}
		}
		case CSmModeEvent::EType::OnPlayerRequestRespawn:
		{
			if(Event.Player == Null) Discard(Event);

			Message::SendStatusMessage(TextLib::Compose(_("$<%1$> did a suicide!"), Event.Player.Name), 4000, 1, CUIConfig::EUISound::PlayerEliminated, 0);

			XmlRpc::OnPlayerRequestRespawn(Event);
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnCapture:
		{
			if(ActivePole && Event.Landmark != Null)
			{
				XmlRpc::OnCapture(Event);
				PassOn(Event);
			}
			else Discard(Event);
		}
		default: PassOn(Event);
	}
}
if(PlayersNbTotal <= 0) 
{
	RoundWinner = Null;
	MB_StopRound = True;
}
***

***EndRound***
***
if(Players.count < 3) DoWarmUp();
UIManager.UIAll.CountdownEndTime = -1;
UIManager.UIAll.MarkersXML = "";
Layers::Detach("AlivePlayers");
Mode::PlaySound(CUIConfig::EUISound::StartMatch, 0);
MB_Sleep(2000);
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
if(RoundWinner != Null)
{
	Message::SendBigMessage(TextLib::Compose(_("$<%1$> win the round!"), RoundWinner.Name), 7000, 0, CUIConfig::EUISound::EndRound, 1);
	RoundWinner.Score.Points += 1;
	AddPlayerXP(RoundWinner, C_XPForWin, "round win");	
}	
else Message::SendBigMessage(TextLib::Compose(_("|Match|Draw")), 7000, 0, CUIConfig::EUISound::EndRound, 0);
EndTime = -1;
if(S_UseLevelProgression)
{
	foreach(Player in Players)
	{
		declare Level for Player.Score = 0;
		declare XP for Player.Score = 0;
		declare UI <=> UIManager.GetUI(Player);
		if(UI != Null)
		{
			declare netwrite Net_PlayerLevel for UI = 0;
			Net_PlayerLevel = Level;
			declare netwrite Net_PlayerXP for UI = 0;
			Net_PlayerXP = XP;
		}	
	}
	Layers::Update("LevelProgression", UpdateLayerProgression());
}
MB_Sleep(3000);
SM::UnspawnAllPlayers();
MB_Sleep(4000);
foreach (Score in Scores) Score.RoundPoints = 0; // Reset round hits
Score::RoundEnd();
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
Message::CleanAllMessages();
foreach(Player in Players)
{
	if(Player.Score.Points >= S_PointsToWin)
	{
		MapWinner <=> Player;
		MB_StopMap = True;
	}
	Player.Armor = 0;
}
***

***EndMap***
***
if(S_UseLevelProgression)
{
	foreach(Player in Players) Layers::Detach("LevelProgression", Player);
}	
EndTime = -1;
Score::MatchEnd(True);
MB_Sleep(1000);
Message::CleanAllMessages();
if (MapWinner != Null) Message::SendBigMessage(TextLib::Compose(_("$<%1$> win the map!"), MapWinner.Name), 6000, 0, CUIConfig::EUISound::EndRound, 0);
else Message::SendBigMessage(TextLib::Compose(_("|Match|Draw")), 6000, 0, CUIConfig::EUISound::Silence, 0);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
MB_Sleep(6000);
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
MB_Sleep(6000);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
Message::CleanAllMessages();
***

***EndServer***
***
Layers::Destroy("AlivePlayers");
if(S_UseLevelProgression)
{
	Layers::Destroy("LevelProgression");
	Layers::Destroy("XPBonus");
}	
Layers::Destroy("RulesReminder");
//Layers::Destroy("SpecView");
SpawnScreen::DestroyRules();
SpawnScreen::DestroyScores();
SpawnScreen::DestroyMapInfo();
Layers::Clean();
***

Void BuildHuntingMarkers()
{
	declare Text Markers = "";
	foreach(Player in Players)
	{
		if(Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) Markers ^= """<marker playerlogin="{{{Player.Login}}}" visibility="Always" imageurl="file://Media/Manialinks/Shootmania/Common/DefendersLeft.dds" box="0 2.2 0" />""";
	}
	UIManager.UIAll.MarkersXML = Markers;
}

// Put default values for the poles
Void InitPole()
{
	foreach (Goal in MapLandmarks_Gauge) 
	{
		if(Goal.Sector != Null)
		{
			Goal.Gauge.Max		= G_Time * 1000;
			Goal.Gauge.Value	= 0;
			Goal.Gauge.Speed	= 0;
			Goal.Gauge.Clan 	= 0;
			Goal.Gauge.Captured = False;
		}	
	}
}

Void ManageBots()
{
	declare PlayerCounter = 0;
	foreach (Player in Players) 
	{
		if (Player.IsFakePlayer && Player.User != Null) continue;
		else PlayerCounter += 1;
	}
	if(PlayerCounter < 1)
	{
		Users_DestroyAllFakes();
		Users_SetNbFakeUsers(0, 0);
	}	
}

// Manage adding and removing of bots
/*Void ManageBots() 
{
	declare LastBotCheck for This = 0;
	if (LastBotCheck + 150000 > Now) return;
	LastBotCheck = Now;
	
	// Collect bots and real players
	declare BotUserIds = Ident[];
	declare RealPlayersIds = Ident[];
	foreach (Player in Players) 
	{
		if (Player.IsFakePlayer && Player.User != Null) BotUserIds.add(Player.User.Id);
		else RealPlayersIds.add(Player.User.Id);
	}
	
	if(RealPlayersIds.count <= 0)
	{
		Users_DestroyAllFakes();
		Users_SetNbFakeUsers(0, 0);
		return;
	}	
	
	// Set number of bots
	declare NbPlayers = Players.count - BotUserIds.count;
	if (NbPlayers <= 0) {
		Users_DestroyAllFakes();
		Users_SetNbFakeUsers(2, 0);
	} else {
		declare NbBots = S_Bots-NbPlayers;
		if (NbBots < 0) {
			NbBots = 0;
		}
		Users_SetNbFakeUsers(NbBots, 0);
	}
	
	// Reset scores of disconnected bots
	foreach (Score in Scores) {
		if (Score.User != Null && Score.User.IsFakeUser && !BotUserIds.exists(Score.User.Id)) {
			Score.Clear();
		}
	}
}*/

Void RespawnPlayers()
{
	foreach(Player in Players)
	{
		if(Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned || Player.RequestsSpectate) continue;

		UnspawnPlayer(Player);
		if (G_SpawnsList.count == 0) {
			foreach (MapLandmark in MapLandmarks_PlayerSpawn) G_SpawnsList.add(MapLandmark.Id);
		}
		declare SpawnId = NullId;
		while (True) 
		{
			SpawnId = G_SpawnsList[MathLib::Rand(0, G_SpawnsList.count - 1)];
			if (SpawnId != G_LatestSpawnId) break;
			if (G_SpawnsList.count == 1) break;
		}
		G_LatestSpawnId = SpawnId;
		// Apply bot hehavior
		if (Player.Driver != Null) 
		{
			Player.Driver.AggroRadius					= 110.;
			Player.Driver.Agressivity					= 10.;
			//Player.Driver.PathSpeedCoef 				= 4.;
			Player.Driver.AttackFilter					= CSmPlayerDriver::ESmAttackFilter::AllOpposite;
			Player.Driver.Behaviour						= CSmPlayerDriver::ESmDriverBehaviour::Patrol;
			Player.Driver.Patrol_Mode 					= CSmPlayerDriver::ESmDriverPatrolMode::Loop;
			Player.Driver.DisengageDistance				= 150.;
			Player.Driver.ReactionTime					= 300;
			Player.Driver.RocketAnticipation			= True;
			//Player.Driver.ShootPeriodMin				= 300;
			//Player.Driver.ShootPeriodMax				= 1800;
		}
		declare Removed = G_SpawnsList.remove(SpawnId);
		declare SpawnArmor for Player = 300;
		declare SpawnAmmo for Player = C_AmmoUL[0];
		if(S_UseLevelProgression)
		{
			declare UI <=> UIManager.GetUI(Player);
			if(UI != Null)
			{
				declare netread Net_StaminaUL for UI = 0;
				declare netread Net_JumpUL for UI = 0;
				declare netread Net_ArmorUL for UI = 0;
				declare netread Net_ArmorRegenUL for UI = 0;
				declare netread Net_AmmoSpeedUL for UI = 0;
				declare netread Net_AmmoUL for UI = 0;
				SpawnAmmo = C_AmmoUL[Net_AmmoUL];
				SpawnArmor = C_ArmorUL[Net_ArmorUL]*100;
				Player.StaminaMax 	= C_StaminaUL[Net_StaminaUL];
				Player.StaminaGain 	= C_StaminaUL[Net_StaminaUL];
				Player.JumpPower 	= C_JumpUL[Net_JumpUL];
				Player.ArmorMax 	= SpawnArmor;
				Player.Armor 		= SpawnArmor;
				Player.AmmoGain 	= C_AmmoSpeedUL[Net_AmmoSpeedUL];
				if(Net_ArmorRegenUL > 0) Player.ArmorReplenishGain = MathLib::NearestInteger(1000./(1.+C_ArmorRegenUL[Net_ArmorRegenUL]));
				else Player.ArmorReplenishGain = MathLib::NearestInteger(1000./(1.+C_ArmorRegenUL[0]));
				SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, SpawnAmmo);
			}
			else
			{
				Player.StaminaMax 	= C_StaminaUL[3];
				Player.StaminaGain 	= C_StaminaUL[3];
				Player.JumpPower 	= C_JumpUL[4];
				Player.ArmorMax 	= SpawnArmor;
				Player.Armor 		= SpawnArmor;
				Player.AmmoGain 	= C_AmmoSpeedUL[3];
				SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_AmmoUL[2]);
			}
		}
		else
		{
			Player.StaminaMax 	= C_StaminaUL[2];
			Player.StaminaGain 	= C_StaminaUL[2];
			Player.JumpPower 	= C_JumpUL[2];
			Player.ArmorMax 	= SpawnArmor;
			Player.Armor 		= SpawnArmor;
			Player.AmmoGain 	= C_AmmoSpeedUL[2];
			SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_AmmoUL[1]);
		}
		SetPlayerAmmoMax(Player, CSmMode::EWeapon::Laser, 1);
		SetPlayerAmmoMax(Player, CSmMode::EWeapon::Nucleus, 1);
		SetPlayerAmmoMax(Player, CSmMode::EWeapon::Arrow, 1);
		SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, True);
		Player.ForceColor = C_PlayerDefaultGlow;
		SM::SpawnPlayer(Player, 0, SpawnArmor, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, 2000);
	}	
}

// Add XP to specific player with specific reason
Void AddPlayerXP(CSmPlayer _Player, Integer _XP, Text _Reason)
{
	if(!S_UseLevelProgression) return;
	
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;
	
	declare XP for _Player.Score = 0;
	declare Level for _Player.Score = 0;
	if(Level >= C_MaxLevel) return;
	
	declare TotalXPGain = 0;
	declare SurvivedWaves for _Player.Score = 0;
	if(_Reason == "round win" || _Reason == "survived wave") TotalXPGain += _XP;
	else if(SurvivedWaves >= 3 && SurvivedWaves < 6) TotalXPGain += _XP*2; // 3 to 5 waves
	else if(SurvivedWaves >= 6 && SurvivedWaves < 9) TotalXPGain += _XP*3; // 6 to 8 waves
	else if(SurvivedWaves >= 9 && SurvivedWaves < 12) TotalXPGain += _XP*4; // 9 to 11 waves
	else if(SurvivedWaves >= 12) TotalXPGain += _XP*5; // More than 12
	else TotalXPGain += _XP;
	XP += TotalXPGain;
	
	if(_Reason != "")
	{
		declare TranslatedReason = "";
		declare Message = "";
		switch(_Player.User.Language)
		{
			case "pl":
			{
				switch(_Reason)
				{
					case "elimination": TranslatedReason = "eliminację";
					case "survived wave": TranslatedReason = "przetrwanie fali";
					case "capture": TranslatedReason = "zdobycie punktu";
					case "round win": TranslatedReason = "wygranie rundy";
				}
				Message = TextLib::Compose(_("+$f90%1$g PD za $f90%2$g!"), TextLib::ToText(TotalXPGain), TranslatedReason);
			}	
			default: Message = TextLib::Compose(_("+$f90%1$g XP for $f90%2$g!"), TextLib::ToText(TotalXPGain), _Reason);
		}
		UI.SendNotice(Message, CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Happy, CUIConfig::EUISound::Silence, 0);
	}	
	// Check is player have new level
	if(XP >= C_Levels[Level+1] && _XP > 0)
	{
		Level += 1;
		declare Message = "";
		switch(_Player.User.Language)
		{
			case "pl": Message = TextLib::Compose(_("$9f0Awansowałeś na $f90%1$9f0 poziom!"), TextLib::ToText(Level));
			default: Message = TextLib::Compose(_("$9f0You evolved to level $f90%1$9f0!"), TextLib::ToText(Level));
		}
		Message::SendStatusMessage(_Player, Message, 6000, 1, CUIConfig::EUISound::ScoreProgress, 0);
		UI.SendNotice(Message, CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
	}	
}

// Check, is there enough players to play
Void DoWarmUp()
{
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	
	UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::Warning;
	StartTime = Now;
	
	// Shutdown the poles during warmup
	foreach (Goal in MapLandmarks_Gauge) {
		Goal.Gauge.Clan = 0;
		Goal.Gauge.Speed = 0;
		Goal.Gauge.Value = 0;
		Goal.Gauge.Max = 1000;
		Goal.Gauge.Captured = False;
	}

	MB_CurrentSection = "WarmUp";
	
	while (G_PlayersAlive < 3 && (!ServerShutdownRequested && !MatchEndRequested)) {
		MB_Yield();
		G_PlayersAlive = 0;
		ManageBots();
		foreach(Player in Players) 
		{
			G_PlayersAlive += 1;
			if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) 
			{
				declare Spawn <=> Map::GetPlayerSpawn("Spawn", MathLib::Rand(0, Map::GetPlayerSpawnsCount()-1));
				if (Spawn != Null) SM::SpawnPlayer(Player, 0, Spawn);
				SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, True);
				SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, 5);
				Player.AmmoGain = 0.65;
			}
			declare UI <=> UIManager.GetUI(Player);
			if (UI == Null) continue;
			declare MSG = "";
			switch(Player.User.Language)
			{
				case "pl": MSG = "Do gry potrzeba przynajmniej 3 graczy";
				case "fr": MSG = "3 joueurs nécessaire pour jouer";
				case "ru": MSG = "Требуется 3 игрока для начала игры";
				case "it": MSG = "Per giocare bisogna almeno 3 giocatori";
				case "de": MSG = "Es müssen 3 Spieler zum Spielen da sein.";
				default: MSG = "3 players needed to play";
			}
			UI.StatusMessage = MSG;
		}

		// Let the server sleep if there's no players on it
		if (G_PlayersAlive <= 0) continue;
	}
	
	SM::UnspawnAllPlayers();
	StartTime = -1;
	UIManager.UIAll.BigMessage = "";
	UIManager.UIAll.StatusMessage = "";
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	MB_CurrentSection = "StartRound";
}

Text UpdateLayerBonus()
{
	return """
<manialink version="1" name="Countdown:Bonus layer">
<frame posn="0 76 1" id="Frame_Bonus">
	<label posn="0 0 0" halign="center" valign="top" style="TextTitle3" id="Label_Text"/>
	<label posn="0 -4 0" halign="center" valign="top" textsize="5" id="Label_Bonus" textcolor="f90" style="TextTitle3"/>
</frame>
<script><!--
main()
{
	declare F_Bonus	<=> (Page.GetFirstChild("Frame_Bonus") as CMlFrame);
	declare L_Bonus	<=> (Page.GetFirstChild("Label_Bonus") as CMlLabel);
	declare L_Text <=> (Page.GetFirstChild("Label_Text") as CMlLabel);
	while(True)
	{
		yield;
		while(InputPlayer == Null) yield;

		declare netread Net_XPBonus for UI = 1;
		declare netread Net_SWaves for UI = 0;
		if(Net_XPBonus < 2) F_Bonus.Hide();
		else
		{
			F_Bonus.Show();
			switch(InputPlayer.User.Language)
			{
				case "pl":
				{
					declare MSG = "";
					switch(Net_XPBonus)
					{
						case 2: MSG = "Podwójne PD";
						case 3: MSG = "Potrójne PD";
						case 4: MSG = "Poczwórne PD";
						case 5: MSG = "Pięciokrotne PD";
					}
					L_Bonus.SetText("$s$o"^MSG);
					L_Text.SetText("Bonus za przetrwanie "^Net_SWaves^" fal");
				}
				default:
				{
					declare MSG = "";
					switch(Net_XPBonus)
					{
						case 2: MSG = "Double XP";
						case 3: MSG = "Triple XP";
						case 4: MSG = "Quadra XP";
						case 5: MSG = "Penta XP";
					}
					L_Bonus.SetText("$s$o"^MSG);
					L_Text.SetText("Bonus for surviving "^Net_SWaves^" waves");
				}
			}	
			
		}
	}
}

--></script>
</manialink>
	""";
}


/*Text UpdateLayerSpecView()
{
	return """
<frame posn="95 -80 0" id="Frame_PlayerStats">
	<quad posn="-14 -9 0" sizen="78 13" halign="left" valign="bottom" style="EnergyBar" substyle="EnergyBar_0.25"/>
	<label posn="25 3 1" textsize="2" text="Kills: - | Deaths: - | Accuracy: - %" id="Label_P1" sizen="75 4" halign="center"/>
	<label posn="25 -3 1" textsize="2" text="Alive since - wave | Longest lifetime: - waves" id="Label_P2" sizen="75 4" halign="center"/>
</frame>
<script><!--
main()
{
	declare F_PlayerStats 	<=> (Page.GetFirstChild("Frame_PlayerStats") as CMlFrame);
	declare L_P1 			<=> (Page.GetFirstChild("Label_P1") as CMlLabel);
	declare L_P2 			<=> (Page.GetFirstChild("Label_P2") as CMlLabel);
	while(True)
	{
		yield;

		if (InputPlayer == Null) continue;
		if (!PageIsVisible) continue;

		declare CSmPlayer TargetPlayer;
		if (GUIPlayer != Null) TargetPlayer <=> GUIPlayer;
		else TargetPlayer <=> InputPlayer;

		declare netread Integer[Integer][Text] Net_PlayerStats for UI;

		if(TargetPlayer == Null) F_PlayerStats.Hide();
		else 
		{
			if(Net_PlayerStats.existskey(TargetPlayer.Login))
			{
				F_PlayerStats.Show();
				L_P1.SetText("Kills: "^Net_PlayerStats[TargetPlayer.Login][0]^" | Deaths: "^Net_PlayerStats[TargetPlayer.Login][1]^" | Accuracy: "^Net_PlayerStats[TargetPlayer.Login][2]^"%");
				L_P2.SetText("Alive since: "^{{{G_ReinforcementWaves}}}-Net_PlayerStats[TargetPlayer.Login][3]^" | Longest survive: "^Net_PlayerStats[TargetPlayer.Login][4]^" waves");
			}
			else F_PlayerStats.Show();
		}
	}
}
--></script>
	""";
}*/

/* 
	Press F3 to open skill tree
	Show progression gauge, player level, XP and needed XP									
*/
Text UpdateLayerProgression()
{
	return """
<manialink version="1" name="Countdown:Progression Layer">
<dico>
   <language id="en">
    	<tree>SKILL TREE</tree>
    	<points>Available skill points:</points>
    	<stamina>More stamina</stamina>
    	<jump>Higher jumps</jump>
    	<armor>More armors</armor>
    	<armorr>Armor regen</armorr>
    	<reload>Faster reload</reload>
    	<ammo>More ammo</ammo>
    	<ul>Upgrade Levels:</ul>
		<open>Press $f90F3$g to open/hide skill tree.</open>
		<info>Use your SP to buy upgrades. You are earning 1 SP for every new level where progress you can see at bottom right corner. You can buy upgrades only in specific order: Upgrade level 1, Upgrade level 2 etc. To buy upgrade, click on + button that is visible only on locations where you can buy.</info>	
		<help>Window Guide</help>
   </language>
   <language id="pl">
    	<tree>UMIEJĘTNOŚCI</tree>
    	<points>Dostępne punkty umiejętności:</points>
    	<stamina>Lepsza kondycja</stamina>
    	<jump>Wyższe skoki</jump>
    	<armor>Pancerz</armor>
		<armorr>Regenarcja pancerza</armorr>
    	<reload>Szybsze przeładowanie</reload>
    	<ammo>Amunicja</ammo>
    	<ul>Poziomy rozwoju:</ul>
		<open>Wciśnij $f90F3$g by otworzyć/schować drzewko umiejętności.</open>
		<info>Użyj swoich SP do wykupienia ulepszeń. 1 SP dostajesz za każdy zdobyty poziom którego postęp widzisz w dolnym prawym rogu. Ulepszenia musisz kupować w kolejności czyli najpierw 1 poziom rozwoju, potem drugi itd. Żeby wykupić ulepszenie, kliknij na przycisk + który widoczny jest tylko tam gdzie stać cię na zakup.</info>
		<help>Przewodnik po oknie</help>
   </language>
</dico>
<frame posn="95 -80 0" id="Frame_Progression">
	<quad posn="-14 -9 0" sizen="78 13" halign="left" valign="bottom" style="EnergyBar" substyle="EnergyBar_0.25"/>
	<gauge posn="-13 -6 1" sizen="76 8" halign="left" valign="bottom" id="Gauge_Progression" drawbg="0" color="f90"/>
	<label posn="25 3 1" textsize="2" text="Level: - | XP: - / - | Missing: - XP" id="Label_PlayerProgression" sizen="75 4" halign="center"/>
	<label posn="25 -4 1" textsize="1" textid="open" sizen="75 6" halign="center"/>
</frame>
<frame posn="0 12 250" id="Frame_SkillTree" hidden="1">
	<quad posn="2 -17 -1" sizen="254 97" style="EnergyBar" halign="center" valign="center" opacity="0.85"/>
	<label posn="-120 29 1" sizen="111 8" style="BgMainMenuTitleHeader" halign="left" textcolor="f90" textsize="6" textid="tree"/>
	<label posn="100 25.5 1" sizen="91.4 7.67" halign="right" style="TextTitle3" valign="center" textsize="4" textid="points"/>
	<label posn="102 25 1" sizen="23.3 7" text="- SP" halign="left" style="TextTitle3" valign="center2" textsize="6" textcolor="9f0" id="Label_SkillPoints"/>
	<label posn="2 -50 1" sizen="246 13.5" textid="info" autonewline="1" textsize="2" halign="center"/>
	<label posn="2.5 -47 1" sizen="250 8" style="BgMainMenuTitleHeader" halign="center" textcolor="f90" textsize="3" textid="help" valign="center2"/>
	<quad posn="0 17 2" sizen="1 58" bgcolor="777A"/>
	<quad posn="-120 19 2" sizen="244 1" bgcolor="777A"/>
	<quad posn="-120 -1 2" sizen="244 1" bgcolor="777A"/>
	<quad posn="-120 -22 2" sizen="244 1" bgcolor="777A"/>
	<quad posn="-120 -42 2" sizen="244 1" bgcolor="777A"/>
	<frame id="Frame_Stamina" posn="0 0 20">
		<label posn="-119 14.5 0" sizen="86 5" textid="stamina" style="TextTitle3" textsize="3" halign="left" valign="center2"/>
		<label posn="-24 8.5 0" sizen="11 11" text="{{{C_StaminaPPL}}}" halign="center" valign="center2" textcolor="bbb" style="TextTitle3" textsize="7"/>
		<label posn="-24 2 0" sizen="10.6 5" text="SP" halign="center" valign="center2" style="TextTitle3" textcolor="bbb" textsize="1"/>
		<label posn="-120 5.5 2" sizen="32 5" textsize="2" textid="ul"/>
		<quad posn="-16 17 40" sizen="16 16" style="UIConstructionBullet_Buttons" substyle="NewBullet" scriptevents="1" id="Quad_StaminaBuy" hidden="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasStaminaUL1" scriptevents="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_StaminaUL1" hidden="1"/>
		<label posn="-84 6 0" text="1" style="StyleValueYellowSmall"/>
		<label posn="-82.5 11 0" sizen="16 5" text="+10%" textsize="2" halign="center"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasStaminaUL2" scriptevents="1"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_StaminaUL2" hidden="1"/>
		<label posn="-69 6 0" text="2" style="StyleValueYellowSmall"/>
		<label posn="-67.5 11 0" sizen="16 5" text="+10%" textsize="2" halign="center"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasStaminaUL3" scriptevents="1"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_StaminaUL3" hidden="1"/>
		<label posn="-54 6 0" text="3" style="StyleValueYellowSmall"/>
		<label posn="-52.5 11 0" sizen="16 5" text="+10%" textsize="2" halign="center"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasStaminaUL4" scriptevents="1"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_StaminaUL4" hidden="1"/>
		<label posn="-39 6 0" text="4" style="StyleValueYellowSmall"/>
		<label posn="-37.5 11 0" sizen="16 5" text="+10%" textsize="2" halign="center"/>
	</frame>
	<frame id="Frame_Jump" posn="123 0 20">
		<label posn="-119 14.5 0" sizen="86 5" textid="jump" style="TextTitle3" textsize="3" halign="left" valign="center2"/>
		<label posn="-24 8.5 0" sizen="11 11" text="{{{C_JumpPPL}}}" halign="center" valign="center2" textcolor="bbb" style="TextTitle3" textsize="7"/>
		<label posn="-24 2 0" sizen="10.6 5" text="SP" halign="center" valign="center2" style="TextTitle3" textcolor="bbb" textsize="1"/>
		<label posn="-120 5.5 2" sizen="32 5" textsize="2" textid="ul"/>
		<quad posn="-16 17 40" sizen="16 16" style="UIConstructionBullet_Buttons" substyle="NewBullet" scriptevents="1" id="Quad_JumpBuy" hidden="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasJumpUL1" scriptevents="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_JumpUL1" hidden="1"/>
		<label posn="-84 6 0" text="1" style="StyleValueYellowSmall"/>
		<label posn="-82.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasJumpUL2" scriptevents="1"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_JumpUL2" hidden="1"/>
		<label posn="-69 6 0" text="2" style="StyleValueYellowSmall"/>
		<label posn="-67.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasJumpUL3" scriptevents="1"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_JumpUL3" hidden="1"/>
		<label posn="-54 6 0" text="3" style="StyleValueYellowSmall"/>
		<label posn="-52.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasJumpUL4" scriptevents="1"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_JumpUL4" hidden="1"/>
		<label posn="-39 6 0" text="4" style="StyleValueYellowSmall"/>
		<label posn="-37.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
	</frame>
	<frame id="Frame_Armor" posn="0 -21 20">
		<label posn="-119 14.5 0" sizen="86 5" textid="armor" style="TextTitle3" textsize="3" halign="left" valign="center2"/>
		<label posn="-24 8.5 0" sizen="11 11" text="{{{C_ArmorPPL}}}" halign="center" valign="center2" textcolor="bbb" style="TextTitle3" textsize="7"/>
		<label posn="-24 2 0" sizen="10.6 5" text="SP" halign="center" valign="center2" style="TextTitle3" textcolor="bbb" textsize="1"/>
		<label posn="-120 5.5 2" sizen="32 5" textsize="2" textid="ul"/>
		<quad posn="-16 17 40" sizen="16 16" style="UIConstructionBullet_Buttons" substyle="NewBullet" scriptevents="1" id="Quad_ArmorBuy" hidden="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasArmorUL1" scriptevents="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_ArmorUL1" hidden="1"/>
		<label posn="-84 6 0" text="1" style="StyleValueYellowSmall"/>
		<label posn="-82.5 11 0" sizen="16 5" text="+1" textsize="2" halign="center"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasArmorUL2" scriptevents="1"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_ArmorUL2" hidden="1"/>
		<label posn="-69 6 0" text="2" style="StyleValueYellowSmall"/>
		<label posn="-67.5 11 0" sizen="16 5" text="+1" textsize="2" halign="center"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasArmorUL3" scriptevents="1"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_ArmorUL3" hidden="1"/>
		<label posn="-54 6 0" text="3" style="StyleValueYellowSmall"/>
		<label posn="-52.5 11 0" sizen="16 5" text="+1" textsize="2" halign="center"/>
	</frame>
	<frame id="Frame_Ammo" posn="123 -21 20">
		<label posn="-119 14.5 0" sizen="86 5" textid="ammo" style="TextTitle3" textsize="3" halign="left" valign="center2"/>
		<label posn="-24 8.5 0" sizen="11 11" text="{{{C_AmmoPPL}}}" halign="center" valign="center2" textcolor="bbb" style="TextTitle3" textsize="7"/>
		<label posn="-24 2 0" sizen="10.6 5" text="SP" halign="center" valign="center2" style="TextTitle3" textcolor="bbb" textsize="1"/>
		<label posn="-120 5.5 2" sizen="32 5" textsize="2" textid="ul"/>
		<quad posn="-16 17 40" sizen="16 16" style="UIConstructionBullet_Buttons" substyle="NewBullet" scriptevents="1" id="Quad_AmmoBuy" hidden="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasAmmoUL1" scriptevents="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_AmmoUL1" hidden="1"/>
		<label posn="-84 6 0" text="1" style="StyleValueYellowSmall"/>
		<label posn="-82.5 11 0" sizen="16 5" text="+1" textsize="2" halign="center"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasAmmoUL2" scriptevents="1"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_AmmoUL2" hidden="1"/>
		<label posn="-69 6 0" text="2" style="StyleValueYellowSmall"/>
		<label posn="-67.5 11 0" sizen="16 5" text="+1" textsize="2" halign="center"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasAmmoUL3" scriptevents="1"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_AmmoUL3" hidden="1"/>
		<label posn="-54 6 0" text="3" style="StyleValueYellowSmall"/>
		<label posn="-52.5 11 0" sizen="16 5" text="+1" textsize="2" halign="center"/>
	</frame>
	<frame id="Frame_AmmoSpeed" posn="123 -41 20">
		<label posn="-119 14.5 0" sizen="86 5" textid="reload" style="TextTitle3" textsize="3" halign="left" valign="center2"/>
		<label posn="-24 8.5 0" sizen="11 11" text="{{{C_AmmoSpeedPPL}}}" halign="center" valign="center2" textcolor="bbb" style="TextTitle3" textsize="7"/>
		<label posn="-24 2 0" sizen="10.6 5" text="SP" halign="center" valign="center2" style="TextTitle3" textcolor="bbb" textsize="1"/>
		<label posn="-120 5.5 2" sizen="32 5" textsize="2" textid="ul"/>
		<quad posn="-16 17 40" sizen="16 16" style="UIConstructionBullet_Buttons" substyle="NewBullet" scriptevents="1" id="Quad_AmmoSpeedBuy" hidden="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasAmmoSpeedUL1" scriptevents="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_AmmoSpeedUL1" hidden="1"/>
		<label posn="-84 6 0" text="1" style="StyleValueYellowSmall"/>
		<label posn="-82.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasAmmoSpeedUL2" scriptevents="1"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_AmmoSpeedUL2" hidden="1"/>
		<label posn="-69 6 0" text="2" style="StyleValueYellowSmall"/>
		<label posn="-67.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasAmmoSpeedUL3" scriptevents="1"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_AmmoSpeedUL3" hidden="1"/>
		<label posn="-54 6 0" text="3" style="StyleValueYellowSmall"/>
		<label posn="-52.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasAmmoSpeedUL4" scriptevents="1"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_AmmoSpeedUL4" hidden="1"/>
		<label posn="-39 6 0" text="4" style="StyleValueYellowSmall"/>
		<label posn="-37.5 11 0" sizen="16 5" text="+5%" textsize="2" halign="center"/>
	</frame>
	<frame id="Frame_ArmorRegen" posn="0 -41 20">
		<label posn="-119 14.5 0" sizen="86 5" textid="armorr" style="TextTitle3" textsize="3" halign="left" valign="center2"/>
		<label posn="-24 8.5 0" sizen="11 11" text="{{{C_ArmorRegenPPL}}}" halign="center" valign="center2" textcolor="bbb" style="TextTitle3" textsize="7"/>
		<label posn="-24 2 0" sizen="10.6 5" text="SP" halign="center" valign="center2" style="TextTitle3" textcolor="bbb" textsize="1"/>
		<label posn="-120 5.5 2" sizen="32 5" textsize="2" textid="ul"/>
		<quad posn="-16 17 40" sizen="16 16" style="UIConstructionBullet_Buttons" substyle="NewBullet" scriptevents="1" id="Quad_ArmorRegenBuy" hidden="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasArmorRegenUL1" scriptevents="1"/>
		<quad posn="-90 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_ArmorRegenUL1" hidden="1"/>
		<label posn="-84 6 0" text="1" style="StyleValueYellowSmall"/>
		<label posn="-82.5 11 0" sizen="16 5" text="{{{C_ArmorRegenUL[1]}}}s" textsize="2" halign="center"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasArmorRegenUL2" scriptevents="1"/>
		<quad posn="-75 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_ArmorRegenUL2" hidden="1"/>
		<label posn="-69 6 0" text="2" style="StyleValueYellowSmall"/>
		<label posn="-67.5 11 0" sizen="16 5" text="{{{C_ArmorRegenUL[2]}}}s" textsize="2" halign="center"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasArmorRegenUL3" scriptevents="1"/>
		<quad posn="-60 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_ArmorRegenUL3" hidden="1"/>
		<label posn="-54 6 0" text="3" style="StyleValueYellowSmall"/>
		<label posn="-52.5 11 0" sizen="16 5" text="{{{C_ArmorRegenUL[3]}}}s." textsize="2" halign="center"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_4" hidden="1" id="Quad_HasArmorRegenUL4" scriptevents="1"/>
		<quad posn="-45 9.5 1" sizen="15 11.5" bgcolor="FFFA" style="Bgs1InRace" substyle="BgTitle3_5" scriptevents="1" id="Quad_ArmorRegenUL4" hidden="1"/>
		<label posn="-39 6 0" text="4" style="StyleValueYellowSmall"/>
		<label posn="-37.5 11 0" sizen="16 5" text="{{{C_ArmorRegenUL[4]}}}s." textsize="2" halign="center"/>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL

main()
{
	while(InputPlayer == Null) yield;

	declare F_SkillTree 			<=> (Page.GetFirstChild("Frame_SkillTree") as CMlFrame);
	declare L_SkillPoints			<=> (Page.GetFirstChild("Label_SkillPoints") as CMlLabel);

	// Buy buttons
	declare Q_StaminaBuy			<=> (Page.GetFirstChild("Quad_StaminaBuy") as CMlQuad);
	declare Q_JumpBuy				<=> (Page.GetFirstChild("Quad_JumpBuy") as CMlQuad);
	declare Q_ArmorBuy				<=> (Page.GetFirstChild("Quad_ArmorBuy") as CMlQuad);
	declare Q_ArmorRegenBuy			<=> (Page.GetFirstChild("Quad_ArmorRegenBuy") as CMlQuad);
	declare Q_AmmoBuy				<=> (Page.GetFirstChild("Quad_AmmoBuy") as CMlQuad);
	declare Q_AmmoSpeedBuy			<=> (Page.GetFirstChild("Quad_AmmoSpeedBuy") as CMlQuad);

	// Stamina backgrounds
	declare Q_HasStaminaUL1 		<=> (Page.GetFirstChild("Quad_HasStaminaUL1") as CMlQuad);
	declare Q_HasStaminaUL2 		<=> (Page.GetFirstChild("Quad_HasStaminaUL2") as CMlQuad);
	declare Q_HasStaminaUL3 		<=> (Page.GetFirstChild("Quad_HasStaminaUL3") as CMlQuad);
	declare Q_HasStaminaUL4 		<=> (Page.GetFirstChild("Quad_HasStaminaUL4") as CMlQuad);
	declare Q_StaminaUL1 			<=> (Page.GetFirstChild("Quad_StaminaUL1") as CMlQuad);
	declare Q_StaminaUL2 			<=> (Page.GetFirstChild("Quad_StaminaUL2") as CMlQuad);
	declare Q_StaminaUL3 			<=> (Page.GetFirstChild("Quad_StaminaUL3") as CMlQuad);
	declare Q_StaminaUL4 			<=> (Page.GetFirstChild("Quad_StaminaUL4") as CMlQuad);

	// Jump backgrounds
	declare Q_HasJumpUL1 		<=> (Page.GetFirstChild("Quad_HasJumpUL1") as CMlQuad);
	declare Q_HasJumpUL2 		<=> (Page.GetFirstChild("Quad_HasJumpUL2") as CMlQuad);
	declare Q_HasJumpUL3 		<=> (Page.GetFirstChild("Quad_HasJumpUL3") as CMlQuad);
	declare Q_HasJumpUL4 		<=> (Page.GetFirstChild("Quad_HasJumpUL4") as CMlQuad);
	declare Q_JumpUL1 			<=> (Page.GetFirstChild("Quad_JumpUL1") as CMlQuad);
	declare Q_JumpUL2 			<=> (Page.GetFirstChild("Quad_JumpUL2") as CMlQuad);
	declare Q_JumpUL3 			<=> (Page.GetFirstChild("Quad_JumpUL3") as CMlQuad);
	declare Q_JumpUL4 			<=> (Page.GetFirstChild("Quad_JumpUL4") as CMlQuad);

	// Armor backgrounds
	declare Q_HasArmorUL1 		<=> (Page.GetFirstChild("Quad_HasArmorUL1") as CMlQuad);
	declare Q_HasArmorUL2 		<=> (Page.GetFirstChild("Quad_HasArmorUL2") as CMlQuad);
	declare Q_HasArmorUL3 		<=> (Page.GetFirstChild("Quad_HasArmorUL3") as CMlQuad);
	declare Q_ArmorUL1 			<=> (Page.GetFirstChild("Quad_ArmorUL1") as CMlQuad);
	declare Q_ArmorUL2 			<=> (Page.GetFirstChild("Quad_ArmorUL2") as CMlQuad);
	declare Q_ArmorUL3 			<=> (Page.GetFirstChild("Quad_ArmorUL3") as CMlQuad);

	// Armor regen backgrounds
	declare Q_HasArmorRegenUL1 			<=> (Page.GetFirstChild("Quad_HasArmorRegenUL1") as CMlQuad);
	declare Q_HasArmorRegenUL2 			<=> (Page.GetFirstChild("Quad_HasArmorRegenUL2") as CMlQuad);
	declare Q_HasArmorRegenUL3 			<=> (Page.GetFirstChild("Quad_HasArmorRegenUL3") as CMlQuad);
	declare Q_HasArmorRegenUL4 			<=> (Page.GetFirstChild("Quad_HasArmorRegenUL4") as CMlQuad);
	declare Q_ArmorRegenUL1 			<=> (Page.GetFirstChild("Quad_ArmorRegenUL1") as CMlQuad);
	declare Q_ArmorRegenUL2 			<=> (Page.GetFirstChild("Quad_ArmorRegenUL2") as CMlQuad);
	declare Q_ArmorRegenUL3 			<=> (Page.GetFirstChild("Quad_ArmorRegenUL3") as CMlQuad);
	declare Q_ArmorRegenUL4 			<=> (Page.GetFirstChild("Quad_ArmorRegenUL4") as CMlQuad);

	// Ammo Speed backgrounds
	declare Q_HasAmmoSpeedUL1 			<=> (Page.GetFirstChild("Quad_HasAmmoSpeedUL1") as CMlQuad);
	declare Q_HasAmmoSpeedUL2 			<=> (Page.GetFirstChild("Quad_HasAmmoSpeedUL2") as CMlQuad);
	declare Q_HasAmmoSpeedUL3 			<=> (Page.GetFirstChild("Quad_HasAmmoSpeedUL3") as CMlQuad);
	declare Q_HasAmmoSpeedUL4 			<=> (Page.GetFirstChild("Quad_HasAmmoSpeedUL4") as CMlQuad);
	declare Q_AmmoSpeedUL1 				<=> (Page.GetFirstChild("Quad_AmmoSpeedUL1") as CMlQuad);
	declare Q_AmmoSpeedUL2 				<=> (Page.GetFirstChild("Quad_AmmoSpeedUL2") as CMlQuad);
	declare Q_AmmoSpeedUL3 				<=> (Page.GetFirstChild("Quad_AmmoSpeedUL3") as CMlQuad);
	declare Q_AmmoSpeedUL4 				<=> (Page.GetFirstChild("Quad_AmmoSpeedUL4") as CMlQuad);

	// Ammo backgrounds
	declare Q_HasAmmoUL1 			<=> (Page.GetFirstChild("Quad_HasAmmoUL1") as CMlQuad);
	declare Q_HasAmmoUL2 			<=> (Page.GetFirstChild("Quad_HasAmmoUL2") as CMlQuad);
	declare Q_HasAmmoUL3 			<=> (Page.GetFirstChild("Quad_HasAmmoUL3") as CMlQuad);
	declare Q_AmmoUL1 				<=> (Page.GetFirstChild("Quad_AmmoUL1") as CMlQuad);
	declare Q_AmmoUL2 				<=> (Page.GetFirstChild("Quad_AmmoUL2") as CMlQuad);
	declare Q_AmmoUL3 				<=> (Page.GetFirstChild("Quad_AmmoUL3") as CMlQuad);

	declare G_Progression 			<=> (Page.GetFirstChild("Gauge_Progression") as CMlGauge);
	declare L_PlayerProgression 	<=> (Page.GetFirstChild("Label_PlayerProgression") as CMlLabel);
		
	while(True)
	{
		yield;

		declare netread Net_PlayerLevel for UI = 0;
		declare netread Net_PlayerXP for UI = 0;	
		declare netwrite Net_UsedPoints for UI = 0;

		declare netwrite Net_StaminaUL for UI = 0;
		declare netwrite Net_JumpUL for UI = 0;
		declare netwrite Net_ArmorUL for UI = 0;
		declare netwrite Net_ArmorRegenUL for UI = 0;
		declare netwrite Net_AmmoSpeedUL for UI = 0;
		declare netwrite Net_AmmoUL for UI = 0;
		
		declare netread Net_ServerWantReset for UI = 0;
		declare netwrite Net_ClientDoReset for UI = 0;
	
		if(Net_ServerWantReset != Net_ClientDoReset && Net_ServerWantReset != 0)
		{
			Net_UsedPoints = 0;
			Net_StaminaUL = 0;
			Net_JumpUL = 0;
			Net_ArmorUL = 0;
			Net_ArmorRegenUL = 0;
			Net_AmmoSpeedUL = 0;
			Net_AmmoUL = 0;
			Net_ClientDoReset = Net_ServerWantReset;
		}
		else Net_ClientDoReset = 0;

		declare ProgressionFormula = 0;
		declare NextLevel = Net_PlayerLevel + 1;
		declare LevelsTable = {{{C_Levels}}};
		if(Net_PlayerLevel < {{{C_MaxLevel}}})
		{
			ProgressionFormula = 100*(Net_PlayerXP-LevelsTable[Net_PlayerLevel])/(LevelsTable[NextLevel]-LevelsTable[Net_PlayerLevel]);
			G_Progression.SetRatio(ProgressionFormula/100.);
			declare Message = "";
			switch(InputPlayer.User.Language)
			{
				case "pl": Message = TL::Compose(_("Poziom: $f90%1$g/$f90{{{C_MaxLevel}}}$g | PD: $f90%2$g/$f90%3$g | Do awansu: $f90%4$g PD"), TL::ToText(Net_PlayerLevel), TL::ToText(Net_PlayerXP), TL::ToText(LevelsTable[NextLevel]), TL::ToText(LevelsTable[NextLevel]-Net_PlayerXP));
				default: Message = TL::Compose(_("Level: $f90%1$g/$f90{{{C_MaxLevel}}}$g | XP: $f90%2$g/$f90%3$g | Need: $f90%4$g XP"), TL::ToText(Net_PlayerLevel), TL::ToText(Net_PlayerXP), TL::ToText(LevelsTable[NextLevel]), TL::ToText(LevelsTable[NextLevel]-Net_PlayerXP));
			}
			L_PlayerProgression.SetText(Message);
		}
		else
		{
			ProgressionFormula = 0;
			G_Progression.SetRatio(1.);
			declare Message = "";
			switch(InputPlayer.User.Language)
			{
				case "pl": Message = TL::Compose(_("Poziom: $f90{{{C_MaxLevel}}}$g/$f90{{{C_MaxLevel}}}$g | PD: $f90%1$g/$f90%1$g"), TL::ToText(LevelsTable[{{{C_MaxLevel}}}]));
				default: Message = TL::Compose(_("Level: $f90{{{C_MaxLevel}}}$g/$f90{{{C_MaxLevel}}}$g | XP: $f90%1$g/$f90%1$g"), TL::ToText(LevelsTable[{{{C_MaxLevel}}}]));
			}
			L_PlayerProgression.SetText(Message);
		}
		declare RemainingPoints = Net_PlayerLevel - Net_UsedPoints;
		L_SkillPoints.SetText(RemainingPoints^" SP");

		// Show buy buttons if it's possible
		if(Net_StaminaUL < 4 && RemainingPoints >= {{{C_StaminaPPL}}}) Q_StaminaBuy.Show();
		else Q_StaminaBuy.Hide();
		
		if(Net_JumpUL < 4 && RemainingPoints >= {{{C_JumpPPL}}}) Q_JumpBuy.Show();
		else Q_JumpBuy.Hide();
		
		if(Net_ArmorUL < 3 && RemainingPoints >= {{{C_ArmorPPL}}}) Q_ArmorBuy.Show();
		else Q_ArmorBuy.Hide();
		
		if(Net_ArmorRegenUL < 4 && RemainingPoints >= {{{C_ArmorRegenPPL}}}) Q_ArmorRegenBuy.Show();
		else Q_ArmorRegenBuy.Hide();
		
		if(Net_AmmoUL < 3 && RemainingPoints >= {{{C_AmmoPPL}}}) Q_AmmoBuy.Show();
		else Q_AmmoBuy.Hide();
		
		if(Net_AmmoSpeedUL < 4 && RemainingPoints >= {{{C_AmmoSpeedPPL}}}) Q_AmmoSpeedBuy.Show();
		else Q_AmmoSpeedBuy.Hide();

		switch(Net_StaminaUL)
		{
			case 0: { Q_HasStaminaUL1.Hide(); Q_HasStaminaUL2.Hide(); Q_HasStaminaUL3.Hide(); Q_HasStaminaUL4.Hide();
					  Q_StaminaUL1.Show(); Q_StaminaUL2.Show(); Q_StaminaUL3.Show(); Q_StaminaUL4.Show(); }
			case 1: { Q_HasStaminaUL1.Show(); Q_HasStaminaUL2.Hide(); Q_HasStaminaUL3.Hide(); Q_HasStaminaUL4.Hide();
					  Q_StaminaUL1.Hide(); Q_StaminaUL2.Show(); Q_StaminaUL3.Show(); Q_StaminaUL4.Show(); }
			case 2: { Q_HasStaminaUL1.Show(); Q_HasStaminaUL2.Show(); Q_HasStaminaUL3.Hide(); Q_HasStaminaUL4.Hide();
					  Q_StaminaUL1.Hide(); Q_StaminaUL2.Hide(); Q_StaminaUL3.Show(); Q_StaminaUL4.Show(); }
			case 3: { Q_HasStaminaUL1.Show(); Q_HasStaminaUL2.Show(); Q_HasStaminaUL3.Show(); Q_HasStaminaUL4.Hide();
					  Q_StaminaUL1.Hide(); Q_StaminaUL2.Hide(); Q_StaminaUL3.Hide(); Q_StaminaUL4.Show(); }
			case 4: { Q_HasStaminaUL1.Show(); Q_HasStaminaUL2.Show(); Q_HasStaminaUL3.Show(); Q_HasStaminaUL4.Show();
					  Q_StaminaUL1.Hide(); Q_StaminaUL2.Hide(); Q_StaminaUL3.Hide(); Q_StaminaUL4.Hide(); Q_StaminaBuy.Hide(); }
		}

		switch(Net_JumpUL)
		{
			case 0: { Q_HasJumpUL1.Hide(); Q_HasJumpUL2.Hide(); Q_HasJumpUL3.Hide(); Q_HasJumpUL4.Hide();
					  Q_JumpUL1.Show(); Q_JumpUL2.Show(); Q_JumpUL3.Show(); Q_JumpUL4.Show(); }
			case 1: { Q_HasJumpUL1.Show(); Q_HasJumpUL2.Hide(); Q_HasJumpUL3.Hide(); Q_HasJumpUL4.Hide();
					  Q_JumpUL1.Hide(); Q_JumpUL2.Show(); Q_JumpUL3.Show(); Q_JumpUL4.Show(); }
			case 2: { Q_HasJumpUL1.Show(); Q_HasJumpUL2.Show(); Q_HasJumpUL3.Hide(); Q_HasJumpUL4.Hide();
					  Q_JumpUL1.Hide(); Q_JumpUL2.Hide(); Q_JumpUL3.Show(); Q_JumpUL4.Show(); }
			case 3: { Q_HasJumpUL1.Show(); Q_HasJumpUL2.Show(); Q_HasJumpUL3.Show(); Q_HasJumpUL4.Hide();
					  Q_JumpUL1.Hide(); Q_JumpUL2.Hide(); Q_JumpUL3.Hide(); Q_JumpUL4.Show(); }
			case 4: { Q_HasJumpUL1.Show(); Q_HasJumpUL2.Show(); Q_HasJumpUL3.Show(); Q_HasJumpUL4.Show();
					  Q_JumpUL1.Hide(); Q_JumpUL2.Hide(); Q_JumpUL3.Hide(); Q_JumpUL4.Hide(); Q_JumpBuy.Hide(); }
		}

		switch(Net_ArmorUL)
		{
			case 0: { Q_HasArmorUL1.Hide(); Q_HasArmorUL2.Hide(); Q_HasArmorUL3.Hide();
					  Q_ArmorUL1.Show(); Q_ArmorUL2.Show(); Q_ArmorUL3.Show(); }
			case 1: { Q_HasArmorUL1.Show(); Q_HasArmorUL2.Hide(); Q_HasArmorUL3.Hide();
					  Q_ArmorUL1.Hide(); Q_ArmorUL2.Show(); Q_ArmorUL3.Show(); }
			case 2: { Q_HasArmorUL1.Show(); Q_HasArmorUL2.Show(); Q_HasArmorUL3.Hide();
					  Q_ArmorUL1.Hide(); Q_ArmorUL2.Hide(); Q_ArmorUL3.Show(); }
			case 3: { Q_HasArmorUL1.Show(); Q_HasArmorUL2.Show(); Q_HasArmorUL3.Show();
					  Q_ArmorUL1.Hide(); Q_ArmorUL2.Hide(); Q_ArmorUL3.Hide(); Q_ArmorBuy.Hide();}
		}

		switch(Net_AmmoUL)
		{
			case 0: { Q_HasAmmoUL1.Hide(); Q_HasAmmoUL2.Hide(); Q_HasAmmoUL3.Hide();
					  Q_AmmoUL1.Show(); Q_AmmoUL2.Show(); Q_AmmoUL3.Show(); }
			case 1: { Q_HasAmmoUL1.Show(); Q_HasAmmoUL2.Hide(); Q_HasAmmoUL3.Hide();
					  Q_AmmoUL1.Hide(); Q_AmmoUL2.Show(); Q_AmmoUL3.Show(); }
			case 2: { Q_HasAmmoUL1.Show(); Q_HasAmmoUL2.Show(); Q_HasAmmoUL3.Hide();
					  Q_AmmoUL1.Hide(); Q_AmmoUL2.Hide(); Q_AmmoUL3.Show(); }
			case 3: { Q_HasAmmoUL1.Show(); Q_HasAmmoUL2.Show(); Q_HasAmmoUL3.Show();
					  Q_AmmoUL1.Hide(); Q_AmmoUL2.Hide(); Q_AmmoUL3.Hide(); Q_AmmoBuy.Hide();}
		}

		switch(Net_ArmorRegenUL)
		{
			case 0: { Q_HasArmorRegenUL1.Hide(); Q_HasArmorRegenUL2.Hide(); Q_HasArmorRegenUL3.Hide(); Q_HasArmorRegenUL4.Hide();
					  Q_ArmorRegenUL1.Show(); Q_ArmorRegenUL2.Show(); Q_ArmorRegenUL3.Show(); Q_ArmorRegenUL4.Show(); }
			case 1: { Q_HasArmorRegenUL1.Show(); Q_HasArmorRegenUL2.Hide(); Q_HasArmorRegenUL3.Hide(); Q_HasArmorRegenUL4.Hide();
					  Q_ArmorRegenUL1.Hide(); Q_ArmorRegenUL2.Show(); Q_ArmorRegenUL3.Show(); Q_ArmorRegenUL4.Show(); }
			case 2: { Q_HasArmorRegenUL1.Show(); Q_HasArmorRegenUL2.Show(); Q_HasArmorRegenUL3.Hide(); Q_HasArmorRegenUL4.Hide();
					  Q_ArmorRegenUL1.Hide(); Q_ArmorRegenUL2.Hide(); Q_ArmorRegenUL3.Show(); Q_ArmorRegenUL4.Show(); }
			case 3: { Q_HasArmorRegenUL1.Show(); Q_HasArmorRegenUL2.Show(); Q_HasArmorRegenUL3.Show(); Q_HasArmorRegenUL4.Hide();
					  Q_ArmorRegenUL1.Hide(); Q_ArmorRegenUL2.Hide(); Q_ArmorRegenUL3.Hide(); Q_ArmorRegenUL4.Show(); }
			case 4: { Q_HasArmorRegenUL1.Show(); Q_HasArmorRegenUL2.Show(); Q_HasArmorRegenUL3.Show(); Q_HasArmorRegenUL4.Show();
					  Q_ArmorRegenUL1.Hide(); Q_ArmorRegenUL2.Hide(); Q_ArmorRegenUL3.Hide(); Q_ArmorRegenUL4.Hide(); Q_ArmorRegenBuy.Hide(); }
		}

		switch(Net_AmmoSpeedUL)
		{
			case 0: { Q_HasAmmoSpeedUL1.Hide(); Q_HasAmmoSpeedUL2.Hide(); Q_HasAmmoSpeedUL3.Hide(); Q_HasAmmoSpeedUL4.Hide();
					  Q_AmmoSpeedUL1.Show(); Q_AmmoSpeedUL2.Show(); Q_AmmoSpeedUL3.Show(); Q_AmmoSpeedUL4.Show(); }
			case 1: { Q_HasAmmoSpeedUL1.Show(); Q_HasAmmoSpeedUL2.Hide(); Q_HasAmmoSpeedUL3.Hide(); Q_HasAmmoSpeedUL4.Hide();
					  Q_AmmoSpeedUL1.Hide(); Q_AmmoSpeedUL2.Show(); Q_AmmoSpeedUL3.Show(); Q_AmmoSpeedUL4.Show(); }
			case 2: { Q_HasAmmoSpeedUL1.Show(); Q_HasAmmoSpeedUL2.Show(); Q_HasAmmoSpeedUL3.Hide(); Q_HasAmmoSpeedUL4.Hide();
					  Q_AmmoSpeedUL1.Hide(); Q_AmmoSpeedUL2.Hide(); Q_AmmoSpeedUL3.Show(); Q_AmmoSpeedUL4.Show(); }
			case 3: { Q_HasAmmoSpeedUL1.Show(); Q_HasAmmoSpeedUL2.Show(); Q_HasAmmoSpeedUL3.Show(); Q_HasAmmoSpeedUL4.Hide();
					  Q_AmmoSpeedUL1.Hide(); Q_AmmoSpeedUL2.Hide(); Q_AmmoSpeedUL3.Hide(); Q_AmmoSpeedUL4.Show(); }
			case 4: { Q_HasAmmoSpeedUL1.Show(); Q_HasAmmoSpeedUL2.Show(); Q_HasAmmoSpeedUL3.Show(); Q_HasAmmoSpeedUL4.Show();
					  Q_AmmoSpeedUL1.Hide(); Q_AmmoSpeedUL2.Hide(); Q_AmmoSpeedUL3.Hide(); Q_AmmoSpeedUL4.Hide(); Q_AmmoSpeedBuy.Hide(); }
		}
		

		foreach(Event in PendingEvents) 
		{
			switch(Event.Type)
			{
				case CMlEvent::Type::KeyPress: 
				{
					if(Event.CharPressed == "2555904") 
					{ // F3
						F_SkillTree.Visible = !F_SkillTree.Visible;
					}
				}
				case CMlEvent::Type::MouseClick:
				{
					switch(Event.ControlId)
					{
						case "Quad_StaminaBuy":
						{
							Net_UsedPoints += {{{C_StaminaPPL}}};
							Net_StaminaUL += 1;
						}
						case "Quad_JumpBuy":
						{
							Net_UsedPoints += {{{C_JumpPPL}}};
							Net_JumpUL += 1;
						}
						case "Quad_ArmorBuy":
						{
							Net_UsedPoints += {{{C_ArmorPPL}}};
							Net_ArmorUL += 1;
						}
						case "Quad_ArmorRegenBuy":
						{
							Net_UsedPoints += {{{C_ArmorRegenPPL}}};
							Net_ArmorRegenUL += 1;
						}
						case "Quad_AmmoBuy":
						{
							Net_UsedPoints += {{{C_AmmoPPL}}};
							Net_AmmoUL += 1;
						}
						case "Quad_AmmoSpeedBuy":
						{
							Net_UsedPoints += {{{C_AmmoSpeedPPL}}};
							Net_AmmoSpeedUL += 1;
						}
					}
				}
			}
		}
	}
}
--></script>
</manialink>
	""";
}

Text UpdateLayerRulesReminder()
{
	declare Text TitleText 			= TextLib::Compose(_("Welcome to %1!"), "Countdown");
	
	return """
<manialink version="1" name="Countdown:Rules Reminder">
<dico>
   <language id="en">
    	<rule1>- Fight with players to be the last man standing.</rule1>
    	<rule2>- Spawn time is increasing after reinforcement wave.</rule2>
   </language>
   <language id="pl">
    	<rule1>- Walcz z innymi by zostać ostatnim żywym na mapie.</rule1>
    	<rule2>- Czas na odrodzenie powiększa się z każdym napływem przeciwników.</rule2>
   </language>
</dico>
<frame id="RulesReminderMainFrame" hidden="true" posn="0 -10 100" >
	<quad posn="0 30 0" sizen="162 55" bgcolor="FFFA" image="file://Media/Manialinks/Shootmania/Common/WelcomeBg.dds" halign="center" valign="center"/>
	<label posn="-71 46 1" sizen="86 5" text="{{{TitleText}}}" textsize="4" textcolor="fA0" style="TextValueSmallSm"/>
	<label posn="-73 37 1" sizen="146 26" textid="rule1"/>
	<label posn="-73 31 1" sizen="146 26" textid="rule2"/>
	<label posn="0 21 1" halign="center" text="{{{TextLib::Compose(_("Press '$<%1F1$>' to close this window."), "$f90")}}}" textsize="2" />
</frame>
<script><!--
	while(InputPlayer == Null) yield;

	declare RulesReminderMainFrame 	<=> (Page.GetFirstChild("RulesReminderMainFrame") as CMlFrame);
	
	while(True) {
		yield;
		
		RulesReminderMainFrame.Show();
		
		foreach(Event in PendingEvents) {
			switch(Event.Type){
				case CMlEvent::Type::KeyPress: {
					if(Event.CharPressed == "2424832" ) { // F1
						RulesReminderMainFrame.Visible = !RulesReminderMainFrame.Visible;
						return; // End of this behavior
					}
				}
			}
		}
	}
--></script>
</manialink>""";
}

Text UpdateLayerRulesReminderXP()
{
	declare Text TitleText 			= TextLib::Compose(_("Welcome to %1!"), "Countdown");
	
	return """
<manialink version="1" name="Countdown:Rules Reminder XP">
<dico>
   <language id="en">
    	<rule1>- Fight with players to be the last man standing.</rule1>
    	<rule2>- Spawn time is increasing after reinforcement wave.</rule2>
    	<rule3>- For actions like hit, kill, capture, wave survive or win you are earning XP.</rule3>
    	<rule4>- Use skill points to buy upgrades by pressing F3.</rule4>
   </language>
   <language id="pl">
    	<rule1>- Walcz z innymi by zostać ostatnim żywym na mapie.</rule1>
    	<rule2>- Czas na odrodzenie powiększa się z każdym napływem przeciwników.</rule2>
    	<rule3>- Za akcje takie jak trafienie, eliminacja, zdobycz, przetrwanie fali czy zwycięstwo dostajesz XP.</rule3>
    	<rule4>- Użyj punktów umiejętności do zakupu ulepszeń wciskając F3.</rule4>
   </language>
</dico>
<frame id="RulesReminderMainFrame" hidden="true" posn="0 -10 100" >
	<quad posn="0 25 0" sizen="162 70" bgcolor="FFFA" image="file://Media/Manialinks/Shootmania/Common/WelcomeBg.dds" halign="center" valign="center"/>
	<label posn="-71 46 1" sizen="86 5" text="{{{TitleText}}}" textsize="4" textcolor="fA0" style="TextValueSmallSm"/>
	<label posn="-73 37 1" sizen="146 26" textid="rule1"/>
	<label posn="-73 31 1" sizen="146 26" textid="rule2"/>
	<label posn="-73 25 1" sizen="146 26" textid="rule3"/>
	<label posn="-73 19 1" sizen="146 26" textid="rule4"/>
	<label posn="0 10 1" halign="center" text="{{{TextLib::Compose(_("Press '$<%1F1$>' to close this window."), "$f90")}}}" textsize="2" />
</frame>
<script><!--
	while(InputPlayer == Null) yield;

	declare RulesReminderMainFrame 	<=> (Page.GetFirstChild("RulesReminderMainFrame") as CMlFrame);
	
	while(True) {
		yield;
		
		RulesReminderMainFrame.Show();
		
		foreach(Event in PendingEvents) {
			switch(Event.Type){
				case CMlEvent::Type::KeyPress: {
					if(Event.CharPressed == "2424832" ) { // F1
						RulesReminderMainFrame.Visible = !RulesReminderMainFrame.Visible;
						return; // End of this behavior
					}
				}
			}
		}
	}
--></script>
</manialink>""";
}

Text UpdateLayerPlayers(Integer _Alive)
{
	return """
<manialink version="1" name="Countdown:Alive Players">
<dico>
	<language id="en">
    	<text>Alive players</text>
		<spawn>NEXT WAVE</spawn>
	</language>
	<language id="pl">
    	<text>Żywi gracze</text>
		<spawn>ODRODZENIA</spawn>
	</language>
</dico>
<frame posn="130 -53 10">
	<quad posn="10 -23 2" sizen="40 18" halign="center" valign="bottom" style="BgsPlayerCard" substyle="BgPlayerCard"/>
	<quad posn="4 -7 10" sizen="11 10" halign="center" image="file://Media/Manialinks/Shootmania/Common/DefendersLeft.dds" />
	<label posn="10 -18 10" sizen="35 8" halign="center" textsize="2" textid="text" style="TextTitle3"/>
	<label posn="15 -8 10" sizen="35 8" halign="center" textsize="8" text="{{{_Alive}}}" textcolor="9f0" style="TextRaceChronoWarning"/>
</frame>
<label posn="0 81 250" halign="center" sizen="24 16" textid="spawn" textcolor="fd0" scale="0.5" style="TextTitle3"/>
<playerlist posn="160 -53" halign="right" scale="1.0" valign="bottom" style="" substyle="Small" lines="32" columns="1" team="0" status="Playing"/>
</manialink> 
""";
}