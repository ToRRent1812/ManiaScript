#Extends "Modes/Shootmania/LoadoutsCore.Script.txt"

#Const CompatibleMapTypes	"FirefightArena"
#Const Version				"2014-10-08"
#Const ScriptName			"Firefight.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/MiniMap2.Script.txt" as MiniMap
#Include "Libs/ST.Script.txt" as ST
#Include "Libs/Nadeo/Victory.Script.txt" as Victory
#Include "Libs/Nadeo/CustomUI.Script.txt" as CustomUI
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Map.Script.txt" as Map
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen

#Setting S_RoundTime			90		as _("Basic round time")
#Setting S_RoundTimeBonus		15		as _("Round time bonus when someone captured the goal")
#Setting S_PoleCaptureDuration	3		as _("Basic duration of the pole capture")
#Setting S_PlayerArmor 			4 		as _("Number of armors per player")
#Setting S_ObjectDetector		40 		as _("Objects markers detection distance (0 to disable)")
#Setting S_ItemSpawnTime		45 		as _("Number of seconds to spawn items after pick-up")
#Setting S_PlayAnn 				True 	as _("Play announcer calling Capturing A etc.")
// Clublinks settings
#Setting S_UsePlayerClublinks	False	as _("Use players clublinks")	// Use the players clublinks, or otherwise use the default teams
#Setting S_ForceClublinkTeam1	""		as "<hidden>"	// Force the Clublink of team 1 (format: http://www.example.com/MyTeam.Club.xml)
#Setting S_ForceClublinkTeam2	""		as "<hidden>"	// Force the Clublink of team 2 (format: http://www.example.com/MyTeam.Club.xml)

#Const C_BlueBot 				0
#Const C_RedBot 				0

// XML-RPC default layers positions
#Const C_LayerProgressionPosition	<131., 125., 0.>

#Const Description  _("RULES:\n- Control 3 zones of goals or eliminate all enemies to win the round.\n- Controlled zone can be stolen by the opposing team.\n- Capture objectives to revive teammates and heal yourself (2 armors).\n- Before round You can pick 1 of 3 secondary weapon.\n- Find weapon items on map to collect primary weapon.")

declare Integer[Integer]			G_ClansMapPoints;		// Number of points cumulated on one map for each clan
declare Ident[]						G_SpawnList1;			// Spawns with tag Spawn1
declare Ident[]						G_SpawnList2;			// Spawns with tag Spawn2
declare CSmMapLandmark[Integer]		G_SpawnList;			// All spawns
declare Integer[Integer]			G_PlayersAlive;			// How many players are alive in specific team
declare Integer[Integer] 			G_ZoneClanList; 		// Which clan control specific zone
declare Integer						G_NbPolesA;				// Number of poles in Zone A
declare Integer						G_NbPolesB;				// Number of poles in Zone B
declare Integer						G_NbPolesC;				// Number of poles in Zone C
declare Integer[Text]				G_SecondaryWeapons;		// Current player secondary weapons
declare Integer[Text]				G_PrimaryWeapons;		// Current player secondary weapons
declare Integer 					G_LastProgressUpdate;	// Time of the last progrresion layer update
declare Integer 					G_LastSettingsUpdate; 	// Time of the last setting layer update
declare Integer 					G_LastTempUpdate;
declare Boolean[Integer] 			G_Ann;

// Globals caches the settings
declare Integer 					G_RoundTime;
declare Integer 					G_RoundTimeBonus;
declare Integer 					G_PoleCaptureDuration;
declare Integer 					G_MapPointsLimit;
declare Integer 					G_ClassSelectionTime;
declare Integer 					G_ObjectDetector;

declare Integer[Integer] 			G_PlayerCountA;
declare Integer[Integer] 			G_PlayerCountB;
declare Integer[Integer] 			G_PlayerCountC;

***LogVersion***
***
MB_LogVersion(ScriptName, Version);
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(Map::GetScriptName(), Map::GetScriptVersion());
MB_LogVersion(CustomUI::GetScriptName(), CustomUI::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
MB_LogVersion(Rank::GetScriptName(), Rank::GetScriptVersion());
MB_LogVersion(ST::GetScriptName(), ST::GetScriptVersion());
***

***InitServer***
***
MB_UseSectionRound		= True;
MB_UseSectionTurn		= False;
MB_UsePlayerClublinks	= S_UsePlayerClublinks;
***

***StartServer***
***
UseClans			= True;
UseProtectClanmates	= False;
UseLaserSkewering	= False;
UseAmmoBonusOnHit	= False;
UsePlayerTagging 	= True;
UseMinimap 			= True;

if(S_RoundTime < 20) G_RoundTime = 20;
else G_RoundTime = S_RoundTime;

if(S_RoundTimeBonus < 0) G_RoundTimeBonus = 0;
else G_RoundTimeBonus = S_RoundTimeBonus;

if(S_PoleCaptureDuration < 1) G_PoleCaptureDuration = 1;
else G_PoleCaptureDuration = S_PoleCaptureDuration;

if(S_MapPointsLimit < 1) G_MapPointsLimit = 1;
else G_MapPointsLimit = S_MapPointsLimit;

if(S_ClassSelectionTime < 5) G_ClassSelectionTime = 5;
else G_ClassSelectionTime = S_ClassSelectionTime;

if(S_ObjectDetector < 0) G_ObjectDetector = 0;
else G_ObjectDetector = S_ObjectDetector;

declare ModeName = "Firefight";
declare ModeObjectives = TextLib::Compose(_("$<%11. $>The goal of this mode is to control 3 zones by capturing the poles/checkpoints or eliminating all enemies.\n$<%12. $>A game is divided in rounds.\n$<%13. $>The first team with %2 points wins the match."), "$"^SpawnScreen::GetModeColor(), TextLib::ToText(S_MapPointsLimit+1));
declare ModeConditions = TextLib::Compose(_("$<%11. $>You can carry 2 weapons. Primary weapon you can find on map by collecting weapon item. The secondary you are choosing before round.\n$<%12. $>Objectives are very important. You can revive dead teammates by capturing the zone.\n$<%13. $>Every respawn in-game costs you 1 armor."), "$"^SpawnScreen::GetModeColor());

SpawnScreen::AddSubsection(_("Type"), _("Team versus Team"), 0.);
SpawnScreen::AddSubsection(_("Objectives"), ModeObjectives, 20.);
SpawnScreen::AddSubsection(_("Conditions"), ModeConditions, 60.);
SpawnScreen::CreatePrettyRules(ModeName);
ModeStatusMessage = _("RULES: Control territory or eliminate all enemies to win the round.");
SM::SetupDefaultVisibility();

// RANK
Rank::Load();
if(Rank::IsServerRanked(True)) ModeStatusMessage = _("RULES: Control territory or eliminate all enemies to win the round.\n\nThis server is $f90RANKED");
else ModeStatusMessage = _("RULES: Control territory or eliminate all enemies to win the round.\n\nThis server is $f30UNRANKED");

CustomUI::Load();
CustomUI::Add("PlayersList_1", <-160., 67.>, <46., 90.>, "top", "left");
CustomUI::Add("PlayersList_2", <160., 67.>, <46., 90.>, "top", "right");
CustomUI::Add("FireFight_GaugeCapture", <0., -45.>, <130., 20.>, "center", "center");
CustomUI::Build();
MiniMap::Load();
// Create layers
Layers::Create("Progression"); // Zone Capture progress
Layers::Create("ProgressBar"); // Specific capture progress
Layers::Create("Markers"); // markers layer
Layers::Create("HUD"); // Hud layer when player is spawned
/*Layers::Create("SpawnScreenMap", """
		<minimap sizen="0 0" mapposition="1 0"/>
	""");*/
Layers::Create("RulesReminder", UpdateLayerRulesReminder());
Layers::SetType("Markers", CUILayer::EUILayerType::Markers);
Layers::SetType("RulesReminder", CUILayer::EUILayerType::CutScene);
//Layers::SetType("SpawnScreenMap", CUILayer::EUILayerType::ScreenIn3d);
Layers::Attach("RulesReminder");
//CreateSpawnScreenMap();
***	

***StartMatch***
***
// Reset clan scores
ClanScores[1] = 0;
ClanScores[2] = 0;
***

***InitMap***
***
declare Integer		ClanMapWinner;		// Clan who win the map
MB_UseIntro = True;
***

***StartMap***
***
assert(Map::GetMapTypeVersion() == 2, "Wrong map version.");
UIManager.UIAll.MarkersXML = "";
UIManager.UIAll.ScreenIn3dHideVersus = False;
UIManager.UIAll.ScreenIn3dHideScoreSummary = False;
G_ClansMapPoints	= [1 => 0, 2 => 0];
G_ZoneClanList 		= [1 => 0, 2 => 0, 3 => 0];
G_SecondaryWeapons.clear();
G_PrimaryWeapons.clear();
G_PlayerCountA 		= [1 => 0, 2 => 0];
G_PlayerCountB 		= [1 => 0, 2 => 0];
G_PlayerCountC 		= [1 => 0, 2 => 0];
ClanMapWinner		= 0;
G_NbPolesA			= 0;
G_NbPolesB			= 0;
G_NbPolesC			= 0;
// RANK
foreach(Score in Scores)
{
	declare CurrentCapGoals for Score = 0;
	CurrentCapGoals = 0;
	declare CurrentMVP for Score = 0;
	CurrentMVP = 0;
	declare CurrentAcc for Score = 0;
	CurrentAcc = 0;
	declare StartAtRound for Score = 0;
	StartAtRound = 0;
	declare Laziness for Score = 0;
	Laziness = 0;
	declare Fired for Score = 0;
	Fired = 0;
	declare Hits for Score = 0;
	Hits = 0;
	declare CurrentKills for Score = 0;
	CurrentKills = 0;
	declare CurrentDeaths for Score = 0;
	CurrentDeaths = 0;
}
InitSpawns();

// Init scores
Score::MatchBegin();

// Init players
foreach (Player in Players) SetPlayerClan(Player, Player.RequestedClan);

// Update the players clublinks
if (S_ForceClublinkTeam1 == "" && S_ForceClublinkTeam2 == "") Clublink::DefineTeamAuto();
else Clublink::DefineTeamFromUrl(S_ForceClublinkTeam1, S_ForceClublinkTeam2);
Clublink::SyncUpdate();

// Init UI
SM::SetupDefaultVisibility();
Message::CleanAllMessages();
ST::Load();
Clublink::Attach();
Clublink::SetSponsorsDisplay(False);
LT_UpdateHeader(G_ClansMapPoints[1], G_ClansMapPoints[2]);

// Debug
Users_SetNbFakeUsers(C_BlueBot, C_RedBot);

SM::UnspawnAllPlayers();
WaitForPlayers();
***

***InitRound***
***
declare Ident FirstOnGoal; 		// The first player on pole
declare Integer RoundClanWinner;// Team, who win the round
declare Integer TempGoalNb;		// To stop looping
declare Integer BestRoundScore;	// The best RoundPoints score in round
declare CSmPlayer MVP;			// The best player in round
***

***StartRound***
***
G_Ann 					= [0 => False, 1 => False, 2 => False, 3 => False, 4 => False, 5 => False];
FirstOnGoal 			= NullId;
TempGoalNb 				= 0;
RoundClanWinner 		= 0;
BestRoundScore 			= 0;
MVP 					= Null;
if(LT_IsAfterHalfTime()) G_ZoneClanList = [1 => 2, 2 => 0, 3 => 1];
else G_ZoneClanList = [1 => 1, 2 => 0, 3 => 2];
G_LastProgressUpdate 	= 0;
G_LastSettingsUpdate 	= 0;
G_LastTempUpdate 		= 0;
G_SecondaryWeapons.clear();
G_PrimaryWeapons.clear();
Mode::Synchro_DoBarrier();
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
Victory::RoundBegin();
Score::RoundBegin();
InitGoals();
InitSpawns();
// If this is the first round and turn on the map, launch the players presentation
if (MB_SectionRoundNb == 1) 
{
	LT_UpdateHeader(G_ClansMapPoints[1], G_ClansMapPoints[2]);
	MB_PlayersPresentationSequence(2500);
	ST::Build();
	ST::UpdateST(1, MB_SectionRoundNb, G_MapPointsLimit, S_FinalRoundExceptDraw);
}
Message::CleanAllMessages();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
Mode::PlaySound(CUIConfig::EUISound::StartRound, 0);
LT_UpdateHeader(G_ClansMapPoints[1], G_ClansMapPoints[2]);
UpdateBasesColors();
if(ServerShutdownRequested || MatchEndRequested) break;
Layers::Update("Progression", UpdateLayerProgression(1));
UIManager.UIAll.MarkersXML = "";
SelectClasses(G_ClassSelectionTime*1000);

// Load Items
ObjectDestroyAll();
foreach (MapLandmark in MapLandmarks_ObjectAnchor) 
{
	declare ObjectSpawned for MapLandmark = False;
	declare ObjectNextSpawn for MapLandmark = Now;
	ObjectSpawned = False;
	ObjectNextSpawn = Now + 3000;
}

// Init players and spawn ticket
foreach (Player in AllPlayers) 
{
	declare SpawnTicket for Player = 0;
	SpawnTicket = 1;
	ActionLoad(Player, CSmMode::EActionSlot::Slot_A, NullId);
	ActionBind(Player, CSmMode::EActionSlot::Slot_A, CSmMode::EActionInput::None);
	declare PrimaryWeapon for Player = 0;
	PrimaryWeapon = 0;
	declare UI <=> UIManager.GetUI(Player);
	if (UI != Null) 
	{ 
		declare netwrite Integer[Text] Net_PrimaryWeapons for UI;
		Net_PrimaryWeapons[Player.Login] = 0;
		UI.SpectatorForcedClan		= Player.CurrentClan;
		UI.SpectatorForceCameraType	= 1;
		Layers::Attach("Progression", Player);
		declare CurrentCapGoals for Player.Score = 0;
		declare CurrentMVP for Player.Score = 0;
		declare CurrentAcc for Player.Score = 0;
		declare Fired for Player.Score = 0;
		declare Hits for Player.Score = 0;
		declare CurrentKills for Player.Score = 0;
		declare CurrentDeaths for Player.Score = 0;
		declare SpawnArmor for Player = 100;
		SpawnArmor = S_PlayerArmor * 100;
		Player.ArmorMax = SpawnArmor;
		declare netwrite Net_PrimaryWeapon for UI = 0;
		Net_PrimaryWeapon = 0;
	}
	declare HasChangedClan for Player = False;
	declare NewSpectator for Player = False;
	SetPlayerClan(Player, Player.RequestedClan);
	HasChangedClan = False;
	NewSpectator = True;
}

foreach (Spectator in Spectators) {
	declare SpawnArmor for Spectator = 100;
	declare NewSpectator for Spectator = False;
	SpawnArmor = 0;
	NewSpectator = False;
}

// Init spectator mode
foreach (Player in AllPlayers) 
{
	declare UI <=> UIManager.GetUI(Player);
	if (UI == Null) continue;
	Layers::Attach("HUD", Player);
	if (Player.RequestsSpectate) 
	{
		declare SpawnTicket for Player = 0;
		SpawnTicket = 0;
		UI.SpectatorForceCameraType = -1;
		UI.SpectatorForcedClan = -1;
	} 
	else 
	{
		UI.SpectatorForceCameraType = 1;
		UI.SpectatorForcedClan = Player.CurrentClan;
	}
}

// Update the players clublinks
if (S_ForceClublinkTeam1 == "" && S_ForceClublinkTeam2 == "") Clublink::DefineTeamAuto();
else Clublink::DefineTeamFromUrl(S_ForceClublinkTeam1, S_ForceClublinkTeam2);
Clublink::SyncUpdate();
CustomUI::Attach();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
Layers::Update("Progression", UpdateLayerProgression(0));
Layers::Attach("Progression");
Layers::Update("ProgressBar", UpdateLayerProgressBar());
Layers::Attach("ProgressBar");
Layers::Attach("Markers");
Layers::Update("HUD", UpdateLayerHUD());
MiniMap::Attach();
UpdateMarker();
//CreateMinimap();
LT_SetRoundTimer(G_RoundTime);
***

***OnNewSpectator***
***
declare UI <=> UIManager.GetUI(Spectator);
if (UI != Null) {
	UI.SpectatorForcedClan		= -1;
	UI.SpectatorForceCameraType	= -1;
	Layers::Attach("Progression", Spectator);
	Layers::Attach("Players", Spectator);
}
declare SpawnTicket for Spectator = 100;
SpawnTicket = 0;
***

***Yield***
***
Message::Loop();

foreach (Event in XmlRpc.PendingEvents) 
{
	if (Event.Type == CXmlRpcEvent::EType::CallbackArray) 
	{
		switch (Event.ParamArray1) 
		{
			case "Firefight_SetProgressionLayerPosition": 
			{
				declare netwrite Net_Firefight_ProgressionLayerPosition for Teams[0] = C_LayerProgressionPosition;
				if (Event.ParamArray2.existskey(0)) Net_Firefight_ProgressionLayerPosition.X = TextLib::ToReal(Event.ParamArray2[0]);
				if (Event.ParamArray2.existskey(1)) Net_Firefight_ProgressionLayerPosition.Y = TextLib::ToReal(Event.ParamArray2[1]);
				if (Event.ParamArray2.existskey(2)) Net_Firefight_ProgressionLayerPosition.Z = TextLib::ToReal(Event.ParamArray2[2]);
			}
		}
	}
}
// Events
foreach (Event in PendingEvents) 
{
	if(Event.Type == CSmModeEvent::EType::OnPlayerAdded)
	{
		if(Event.Player == Null) Discard(Event);
			
		/*declare Kicked = False;

		if(Rank::GetUserRank(Event.Player.User) < S_MinimumTierToPlay) Kicked = Admin_KickUser(Event.Player.User, TextLib::Compose(_("You need to have %1 or better to play on this server."), Rank::GetLevelName(S_MinimumTierToPlay)));
		if(Rank::GetUserRank(Event.Player.User) > S_MaximumTierToPlay) Kicked = Admin_KickUser(Event.Player.User, TextLib::Compose(_("Players with higher rank than %1 can't play on this server."), Rank::GetLevelName(S_MaximumTierToPlay)));
*/
		declare UI <=> UIManager.GetUI(Event.Player);
		if (UI != Null) 
		{
			UI.SpectatorForcedClan		= Event.Player.CurrentClan;
			UI.SpectatorForceCameraType	= 1;
			declare CurrentAcc for Event.Player.Score = 0;
			CurrentAcc = 0;
			declare Fired for Event.Player.Score = 0;
			Fired = 0;
			declare Hits for Event.Player.Score = 0;
			Hits = 0;
			declare CurrentKills for Event.Player.Score = 0;
			CurrentKills = 0;
			declare CurrentDeaths for Event.Player.Score = 0;
			CurrentDeaths = 0;
			declare CurrentCapGoals for Event.Player.Score = 0;
			CurrentCapGoals = 0;
			declare CurrentMVP for Event.Player.Score = 0;
			CurrentMVP = 0;
			declare StartAtRound for Event.Player.Score = 0;
			StartAtRound = MB_SectionRoundNb;
		}
		PassOn(Event);
	}
}
***

***PlayLoop***
***
declare PlayerCountA = [1 => 0, 2 => 0];
declare PlayerCountB = [1 => 0, 2 => 0];
declare PlayerCountC = [1 => 0, 2 => 0];
if(G_LastTempUpdate + 30 < Now) // There is a loop bug when at the same time, two zones have been captured
{
	G_LastTempUpdate = Now;
	if(TempGoalNb > 0) TempGoalNb = 0;
}
if(G_LastSettingsUpdate + 2000 < Now)
{
	G_LastSettingsUpdate = Now;

	ST::UpdateST(1, MB_SectionRoundNb, G_MapPointsLimit, S_FinalRoundExceptDraw);

	if(S_RoundTime < 20) G_RoundTime = 20;
	else G_RoundTime = S_RoundTime;

	if(S_RoundTimeBonus < 0) G_RoundTimeBonus = 0;
	else G_RoundTimeBonus = S_RoundTimeBonus;

	if(S_PoleCaptureDuration < 1) G_PoleCaptureDuration = 1;
	else G_PoleCaptureDuration = S_PoleCaptureDuration;

	if(!S_FinalRoundExceptDraw || MB_SectionRoundNb != S_MapPointsLimit*2+1)
	{
		if(S_MapPointsLimit < 1) G_MapPointsLimit = 1;
		else G_MapPointsLimit = S_MapPointsLimit;
	}		

	if(S_ClassSelectionTime < 5) G_ClassSelectionTime = 5;
	else G_ClassSelectionTime = S_ClassSelectionTime;
	
	if(S_ObjectDetector < 0) G_ObjectDetector = 0;
	else G_ObjectDetector = S_ObjectDetector;
	
	if(PlayersNbTotal < 2) MB_StopRound = True;
}

// Unspawn and mark players changing clan
foreach (Player in Players) {
	if (!Player.IsFakePlayer && Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
		// if the player wants to change clan, then remove him from the current clan
		// it will be added to the correct clan at next respawn.
		if (Player.CurrentClan != 0 && Player.RequestedClan != Player.CurrentClan) {
			UnspawnPlayer(Player);
			declare HasChangedClan for Player = False;
			HasChangedClan = True;
			Layers::Detach("HUD", Player);
		}
	}
	if(!Player.IsFakePlayer && Player.RequestsSpectate)
	{
		declare NewSpectator for Player = False;
		NewSpectator = True;
		Layers::Detach("WeaponSelection", Player);
		Layers::Detach("HUD", Player);
	}
}

// Don't let players going spectate respawn afterward
foreach (Spectator in Spectators) 
{
	declare SpawnArmor for Spectator = 100;
	declare NewSpectator for Spectator = False;
	SpawnArmor = 0;
	if (NewSpectator) NewSpectator = False;
}
// Spawning players
if(RoundClanWinner == 0)
{
	foreach (Player in Players)
	{
		declare HasChangedClan for Player = False;
		declare NewSpectator for Player = True;
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !HasChangedClan)
		{
			declare SecondaryWeapon for Player = 1;
			declare SpawnTicket for Player = 0;
			if(SpawnTicket <= 0) continue;
			declare SpawnArmor for Player = 100;
			if (SpawnArmor < 100) SpawnArmor = 100;
			if (SpawnArmor > Player.ArmorMax) SpawnArmor = Player.ArmorMax;
			if (Player.CurrentClan != 1 && Player.CurrentClan != 2)
			{
				SetPlayerClan(Player, Player.RequestedClan);
				SpawnTicket = 1;
			}
			if (Player.RequestedClan == 1 && SpawnArmor > 0)
			{
				declare SpawnId = NullId;
				if(LT_IsAfterHalfTime()) SpawnId = G_SpawnList2[MathLib::Rand(0, G_SpawnList2.count - 1)];	
				else SpawnId = G_SpawnList1[MathLib::Rand(0, G_SpawnList1.count - 1)];
				if (SpawnId != NullId)
				{
					SM::SpawnPlayer(Player, Player.CurrentClan, SpawnArmor, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, 3000);
					SpawnTicket = 0;
					declare MSG = "";
					switch(Player.User.Language)
					{
						case "pl": MSG = "$fd0Zdominuj terytorium i wzywaj posiłki przez zdobywanie stref!";
						case "fr": MSG = "$fd0Prends le contrôle du territoire et ranime tes coéquipiers en capturant les poles !";
						case "ru": MSG = "$fd0Контролируйте территорию и возрождайте товарищей по команде путём захвата флагов!";
						case "it": MSG = "$fd0Domina il territorio e chiama i rinforzi attraverso catturare delle zone!";
						case "de": MSG = "$fd0Herrsche über das Gebiet und erlöse teamkameraden durch Erobern der Pfähle!";
						default: MSG = "$fd0Control territory and revive teammates by capturing the poles!";
					} 
					Message::SendStatusMessage(Player, MSG, 5000, 0);
					declare UI <=> UIManager.GetUI(Player);
					if (UI != Null) 
					{
						/*ActionLoad(Player, CSmMode::EActionSlot::Slot_C, G_CustomStrafe);
						ActionBind(Player, CSmMode::EActionSlot::Slot_C, CSmMode::EActionInput::Consumable1);*/

						declare netread Net_SecondaryWeapon for UI = 1;
						switch (Net_SecondaryWeapon) 
						{
							case 1:
							{
								ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::None);
								SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, False);
								SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_RocketsAmmo);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								Player.AmmoGain = 1.0;
								SecondaryWeapon = 1;
							}
							case 2:
							{
								// Action MAKER
								ActionLoad(Player, CSmMode::EActionSlot::Slot_B, G_CustomBounceRocket);
    							ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::Weapon);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								SecondaryWeapon = 2;
							}
							case 3:
							{
								// Action MAKER
								ActionLoad(Player, CSmMode::EActionSlot::Slot_B, G_CustomElectricPistol);
    							ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::Weapon);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								SecondaryWeapon = 3;
							}
							default: //basic
							{
								ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::None);
								SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, False);
								SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_RocketsAmmo);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								Player.AmmoGain = 1.0;
								SecondaryWeapon = 1;
							}
						}
						G_SecondaryWeapons[Player.Login] = SecondaryWeapon;
						declare netwrite Integer[Text] Net_SecondaryWeapons for UI;
						Net_SecondaryWeapons = G_SecondaryWeapons;
					}
					else
					{
						SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, False);
						SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_RocketsAmmo);
						Player.StaminaMax = C_StaminaWith1Weapon;
						Player.StaminaGain = C_StaminaWith1Weapon;
						Player.SpeedPower = C_SpeedWith1Weapon;
						Player.AmmoGain = 1.0;
						SecondaryWeapon = 1;
					}	
					Player.Armor = SpawnArmor;
					Player.ArmorMax = SpawnArmor;
				}
				else MB_Log("Wrong map, check spawn tags");	
			}
			else if (Player.RequestedClan == 2 && SpawnArmor > 0)
			{
				declare SpawnId = NullId;
				if(LT_IsAfterHalfTime()) SpawnId = G_SpawnList1[MathLib::Rand(0, G_SpawnList1.count - 1)];
				else SpawnId = G_SpawnList2[MathLib::Rand(0, G_SpawnList2.count - 1)];
				if (SpawnId != NullId) 
				{
					SM::SpawnPlayer(Player, Player.CurrentClan, SpawnArmor, MapLandmarks_PlayerSpawn[SpawnId].PlayerSpawn, 3000);
					SpawnTicket = 0;
					declare MSG = "";
					switch(Player.User.Language)
					{
						case "pl": MSG = "$fd0Zdominuj terytorium i wzywaj posiłki przez zdobywanie stref!";
						case "fr": MSG = "$fd0Prends le contrôle du territoire et ranime tes coéquipiers en capturant les poles !";
						case "ru": MSG = "$fd0Контролируйте территорию и возрождайте товарищей по команде путём захвата флагов!";
						case "it": MSG = "$fd0Domina il territorio e chiama i rinforzi attraverso catturare delle zone!";
						case "de": MSG = "$fd0Herrsche über das Gebiet und erlöse teamkameraden durch Erobern der Pfähle!";
						default: MSG = "$fd0Control territory and revive teammates by capturing the poles!";
					} 
					Message::SendStatusMessage(Player, MSG, 5000, 0);
					declare UI <=> UIManager.GetUI(Player);
					if (UI != Null) 
					{
						/*ActionLoad(Player, CSmMode::EActionSlot::Slot_C, G_CustomStrafe);
						ActionBind(Player, CSmMode::EActionSlot::Slot_C, CSmMode::EActionInput::Consumable1);*/
						declare netread Net_SecondaryWeapon for UI = 1;
						switch (Net_SecondaryWeapon) 
						{
							case 1: //Soldier
							{
								ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::None);
								SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, False);
								SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_RocketsAmmo);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								Player.AmmoGain = 1.0;
								SecondaryWeapon = 1;
							}
							case 2: // Ninja
							{
								// Action MAKER
								ActionLoad(Player, CSmMode::EActionSlot::Slot_B, G_CustomBounceRocket);
    							ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::Weapon);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								SecondaryWeapon = 2;
							}
							case 3: // Commando
							{
								// Action MAKER
								ActionLoad(Player, CSmMode::EActionSlot::Slot_B, G_CustomElectricPistol);
    							ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::Weapon);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								SecondaryWeapon = 3;
							}
							default: //basic
							{
								ActionBind(Player, CSmMode::EActionSlot::Slot_B, CSmMode::EActionInput::None);
								SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, False);
								SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_RocketsAmmo);
								Player.StaminaMax = C_StaminaWith1Weapon;
								Player.StaminaGain = C_StaminaWith1Weapon;
								Player.SpeedPower = C_SpeedWith1Weapon;
								Player.AmmoGain = 1.0;
								SecondaryWeapon = 1;
							}
						}
						G_SecondaryWeapons[Player.Login] = SecondaryWeapon;
						declare netwrite Integer[Text] Net_SecondaryWeapons for UI;
						Net_SecondaryWeapons = G_SecondaryWeapons;
					}
					else
					{
						SetPlayerWeapon(Player, CSmMode::EWeapon::Rocket, False);
						SetPlayerAmmoMax(Player, CSmMode::EWeapon::Rocket, C_RocketsAmmo);
						Player.StaminaMax = C_StaminaWith1Weapon;
						Player.StaminaGain = C_StaminaWith1Weapon;
						Player.SpeedPower = C_SpeedWith1Weapon;
						Player.AmmoGain = 1.0;
						SecondaryWeapon = 1;
					}
					Player.Armor = SpawnArmor;
					Player.ArmorMax = SpawnArmor;
				}
				else MB_Log("Wrong map, check spawn tags");
			}
		}
	}		
}

// Timer management
if (G_RoundTime > 0) 
{
	// End of the round
	if (Now == EndTime) 
	{
		foreach (Player in Players)
		{
			declare SpawnTicket for Player = 0;
			SpawnTicket = 0;
			declare SpawnArmor for Player = 100;
			SpawnArmor = 0;
		}
		SM::UnspawnAllPlayers();
		Message::CleanBigMessages();
		Message::SendBigMessage(TextLib::Compose(_("Time limit reached!")), 4000, 0);
		Layers::Update("Progression", UpdateLayerProgression(0));
		declare Integer Points1 = 0;
		declare Integer Points2 = 0;
		switch(G_ZoneClanList[1])
		{
			case 1: Points1+=1;
			case 2: Points2+=1;
		}
		switch(G_ZoneClanList[2])
		{
			case 1: Points1+=1;
			case 2: Points2+=1;
		}
		switch(G_ZoneClanList[3])
		{
			case 1: Points1+=1;
			case 2: Points2+=1;
		}
		if(Points1 > Points2)
		{
			Victory::SetRoundWinnerIfNoWinner(1);
			RoundClanWinner = 1;
		}	
		else if(Points2 > Points1)
		{
			Victory::SetRoundWinnerIfNoWinner(2);
			RoundClanWinner = 2;
		}
		else
		{
			if(S_FinalRoundExceptDraw && MB_SectionRoundNb == S_MapPointsLimit*2+1)
			{
				declare AllPoints1 = 0;
				declare AllPoints2 = 0;
				foreach(Player in Players)
				{
					if(Player.CurrentClan == 1) AllPoints1 += Player.Score.RoundPoints;
					else if(Player.CurrentClan == 2) AllPoints2 += Player.Score.RoundPoints;
					
					if(AllPoints1 > AllPoints2)
					{
						Victory::SetRoundWinnerIfNoWinner(1);
						RoundClanWinner = 1;
					}
					else if(AllPoints2 > AllPoints1)
					{
						Victory::SetRoundWinnerIfNoWinner(2);
						RoundClanWinner = 2;
					}
					else
					{
						declare ran = MathLib::Rand(1, 2);
						Victory::SetRoundWinnerIfNoWinner(ran);
					}
				}
			}
			else
			{
				Victory::SetRoundDrawIfNoWinner();
				RoundClanWinner = 0;
			}	
		}	
		MB_StopRound = True;
	}
}

// Poles management
foreach (LandmarkGauge in MapLandmarks_Gauge) 
{
	if(LandmarkGauge.Sector != Null)
	{
		switch(LandmarkGauge.Tag)
		{
			case "Zone A":
			{	
				if (LandmarkGauge.Sector.PlayersIds.count > 0) 
				{
					foreach (PlayerId in LandmarkGauge.Sector.PlayersIds) 
					{
						declare Player <=> Players[PlayerId];
						if (FirstOnGoal != NullId && !LandmarkGauge.Sector.PlayersIds.exists(FirstOnGoal) && LandmarkGauge.Gauge.ValueReal != 0.) FirstOnGoal = NullId;
						if (FirstOnGoal == NullId) FirstOnGoal = PlayerId;
						PlayerCountA[Player.CurrentClan] += 1;
					}
				}
			}
			case "Zone B":
			{
				if (LandmarkGauge.Sector.PlayersIds.count > 0) 
				{
					foreach (PlayerId in LandmarkGauge.Sector.PlayersIds) 
					{
						declare Player <=> Players[PlayerId];
						if (FirstOnGoal != NullId && !LandmarkGauge.Sector.PlayersIds.exists(FirstOnGoal) && LandmarkGauge.Gauge.ValueReal != 0.) FirstOnGoal = NullId;
						if (FirstOnGoal == NullId) FirstOnGoal = PlayerId;
						PlayerCountB[Player.CurrentClan] += 1;
					}
				}
			}
			case "Zone C":
			{
				if (LandmarkGauge.Sector.PlayersIds.count > 0) 
				{
					foreach (PlayerId in LandmarkGauge.Sector.PlayersIds) 
					{
						declare Player <=> Players[PlayerId];
						if (FirstOnGoal != NullId && !LandmarkGauge.Sector.PlayersIds.exists(FirstOnGoal) && LandmarkGauge.Gauge.ValueReal != 0.) FirstOnGoal = NullId;
						if (FirstOnGoal == NullId) FirstOnGoal = PlayerId;
						PlayerCountC[Player.CurrentClan] += 1;
					}
				}
			}
		}					
	}
}

foreach (LandmarkGauge in MapLandmarks_Gauge) 
{
	if(LandmarkGauge.Sector != Null)
	{
		if(LandmarkGauge.Tag == "Zone A")
		{
			if(PlayerCountA[1] > 0 || PlayerCountA[2] > 0)
			{
				if (LandmarkGauge.Gauge.Clan == 0) 
				{
					if (PlayerCountA[1] > PlayerCountA[2]) LandmarkGauge.Gauge.Clan = 1;
					else if (PlayerCountA[2] > PlayerCountA[1]) LandmarkGauge.Gauge.Clan = 2;
				}
				// Capturing
				if (PlayerCountA[LandmarkGauge.Gauge.Clan] > PlayerCountA[3-LandmarkGauge.Gauge.Clan] && !LandmarkGauge.Gauge.Captured)
				{
					LandmarkGauge.Gauge.Speed = 2 + PlayerCountA[LandmarkGauge.Gauge.Clan] - PlayerCountA[3-LandmarkGauge.Gauge.Clan];

					if(S_PlayAnn)
					{
						foreach(Player in AllPlayers)
						{
							if(Player.CurrentClan == LandmarkGauge.Gauge.Clan && !G_Ann[0])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/capturingA.ogg", 6., Player);
								G_Ann[0] = True;
								ResetBlock(0);
							}	
							else if(Player.CurrentClan == 3-LandmarkGauge.Gauge.Clan && !G_Ann[1])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/oppcapturingA.ogg", 6., Player);
								G_Ann[1] = True;
								ResetBlock(1);
							}	
						}
					}	
				}	
				// Opposing
				else if (PlayerCountA[3-LandmarkGauge.Gauge.Clan] > PlayerCountA[LandmarkGauge.Gauge.Clan]) 
				{
					LandmarkGauge.Gauge.Speed = -1 - PlayerCountA[3-LandmarkGauge.Gauge.Clan] + PlayerCountA[LandmarkGauge.Gauge.Clan];
					if(S_PlayAnn)
					{
						foreach(Player in AllPlayers)
						{
							if(Player.CurrentClan == LandmarkGauge.Gauge.Clan && !G_Ann[1])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/oppcapturingA.ogg", 6., Player);
								G_Ann[1] = True;
								ResetBlock(1);
							}	
							else if(Player.CurrentClan == 3-LandmarkGauge.Gauge.Clan && !G_Ann[0])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/capturingA.ogg", 6., Player);
								G_Ann[0] = True;
								ResetBlock(0);
							}	
						}
					}
					if (LandmarkGauge.Gauge.Value == 0.)
					{
						UpdateMarker();
						LandmarkGauge.Gauge.Clan = 3-LandmarkGauge.Gauge.Clan;
						G_ZoneClanList[1] = 0;
						//FirstOnGoal == NullId;
					}
				} 
				// Draw
				else {
					LandmarkGauge.Gauge.Speed = 0;
				}
			}
			// Regeneration
			else if(LandmarkGauge.Gauge.Clan != 0 && G_ZoneClanList[1] == LandmarkGauge.Gauge.Clan && LandmarkGauge.Gauge.ValueReal <= 1.) LandmarkGauge.Gauge.Speed = 1;
			else LandmarkGauge.Gauge.Speed = 0;
			// Captured
			if (LandmarkGauge.Gauge.Value >= LandmarkGauge.Gauge.Max && LandmarkGauge.Gauge.Clan != G_ZoneClanList[1]) 
			{
				LandmarkGauge.Gauge.Captured = True;
				// Give bonus to timer and manage only once
				if (G_RoundTime > 0 && G_RoundTimeBonus > 0)
				{
					TempGoalNb += 1;
					if(TempGoalNb == 1)
					{
						EndTime += (G_RoundTimeBonus*1000);
						G_ZoneClanList[1] = LandmarkGauge.Gauge.Clan;
						UpdateMarker();
					}
				}

				UpdateBasesColors();
				if(LandmarkGauge.Sector.PlayersIds.count > 0)
				{
					foreach (PlayerId in LandmarkGauge.Sector.PlayersIds) 
					{
						if (Players.existskey(PlayerId) && Players[PlayerId].Score != Null) 
						{
							declare Player <=> Players[PlayerId];
							Player.Armor += 200;
							declare CurrentCapGoals for Player.Score = 0;
							CurrentCapGoals += 1;
							Score::AddPoints(Player, 3);	
						}
					}
				}
				
				if (Players.existskey(FirstOnGoal)) 
				{
					foreach(Player in Players)
					{
						if(Player.CurrentClan == G_ZoneClanList[1] && Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
						{
							UnspawnPlayer(Player);
							if(G_ZoneClanList[1] == 1)
 							{
 								declare SpawnTicket for Player = 0;
								SpawnTicket = 1;
 							}
							else if(G_ZoneClanList[1] == 2) 
							{
								declare SpawnTicket for Player = 0;
								SpawnTicket = 1;
							}	
						}		
					}
					if(G_ZoneClanList[1] > 0)
					{
						UIManager.UIAll.SendNotice(
						TextLib::Compose(_("$<%1$> captured Zone A"), Teams[G_ZoneClanList[1]-1].ColorizedName), 
						CUIConfig::ENoticeLevel::Default , Null, 
						CUIConfig::EAvatarVariant::Default, 
						CUIConfig::EUISound::Capture, 0
						);
						Message::CleanBigMessages();
						foreach(Player in Players)
						{
							declare MSG = "";
							switch(Player.User.Language)
							{
								case "pl": MSG = TextLib::Compose(_("$AAAStrefa A$g przejęta przez $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "fr": MSG = TextLib::Compose(_("$AAAZone A$g contrôlée par $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "ru": MSG = TextLib::Compose(_("$AAAЗона A$g контролируется $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "it": MSG = TextLib::Compose(_("$AAALa zona A$g Presa da $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "de": MSG = TextLib::Compose(_("$AAAZone A$g wird von $<%1$> kontrolliert!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								default: MSG = TextLib::Compose(_("$AAAZone A$g is controlled by $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
							} 
							Message::SendBigMessage(Player, MSG, 3500, 0);
						}	
						foreach(Spectator in Spectators)
						{
							declare MSG = "";
							switch(Spectator.User.Language)
							{
								case "pl": MSG = TextLib::Compose(_("$AAAStrefa A$g przejęta przez $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "fr": MSG = TextLib::Compose(_("$AAAZone A$g contrôlée par $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "ru": MSG = TextLib::Compose(_("$AAAЗона A$g контролируется $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "it": MSG = TextLib::Compose(_("$AAALa zona A$g Presa da $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								case "de": MSG = TextLib::Compose(_("$AAAZone A$g wird von $<%1$> kontrolliert!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
								default: MSG = TextLib::Compose(_("$AAAZone A$g is controlled by $<%1$>!"), Teams[G_ZoneClanList[1]-1].ColorizedName);
							} 
							Message::SendBigMessage(Spectator, MSG, 4000, 0);
						}
					}
				}
			}	
		}
		if(LandmarkGauge.Tag == "Zone B")
		{
			if(PlayerCountB[1] > 0 || PlayerCountB[2] > 0)
			{
				if (LandmarkGauge.Gauge.Clan == 0) 
				{
					if (PlayerCountB[1] > PlayerCountB[2]) LandmarkGauge.Gauge.Clan = 1;
					else if (PlayerCountB[2] > PlayerCountB[1]) LandmarkGauge.Gauge.Clan = 2;
				}
				// Capturing
				if (PlayerCountB[LandmarkGauge.Gauge.Clan] > PlayerCountB[3-LandmarkGauge.Gauge.Clan] && !LandmarkGauge.Gauge.Captured)
				{
					LandmarkGauge.Gauge.Speed = 2 + PlayerCountB[LandmarkGauge.Gauge.Clan] - PlayerCountB[3-LandmarkGauge.Gauge.Clan];

					if(S_PlayAnn)
					{
						foreach(Player in AllPlayers)
						{
							if(Player.CurrentClan == LandmarkGauge.Gauge.Clan && !G_Ann[2]) 
							{	
								Sound::PlaySound("file://Media/Sounds/FireFight/capturingB.ogg", 6., Player);
								G_Ann[2] = True;
								ResetBlock(2);
							}	
							else if(Player.CurrentClan == 3-LandmarkGauge.Gauge.Clan && !G_Ann[3])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/oppcapturingB.ogg", 6., Player);
								G_Ann[3] = True;
								ResetBlock(3);
							}	
						}

					}
				}	
				// Opposing
				else if (PlayerCountB[3-LandmarkGauge.Gauge.Clan] > PlayerCountB[LandmarkGauge.Gauge.Clan]) 
				{
					LandmarkGauge.Gauge.Speed = -1 - PlayerCountB[3-LandmarkGauge.Gauge.Clan] + PlayerCountB[LandmarkGauge.Gauge.Clan];
					if(S_PlayAnn)
					{
						foreach(Player in AllPlayers)
						{
							if(Player.CurrentClan == LandmarkGauge.Gauge.Clan && !G_Ann[3])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/oppcapturingB.ogg", 6., Player);
								G_Ann[3] = True;
								ResetBlock(3);
							}	
							else if(Player.CurrentClan == 3-LandmarkGauge.Gauge.Clan && !G_Ann[2])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/capturingB.ogg", 6., Player);
								G_Ann[2] = True;
								ResetBlock(2);
							
							}
						}
					}
					if (LandmarkGauge.Gauge.Value == 0.)
					{
						UpdateMarker();
						LandmarkGauge.Gauge.Clan = 3-LandmarkGauge.Gauge.Clan;
						G_ZoneClanList[2] = 0;
						//FirstOnGoal == NullId;
					}	
				} 
				// Draw
				else {
					LandmarkGauge.Gauge.Speed = 0;
				}
			} 
			// Regeneration
			else if(LandmarkGauge.Gauge.Clan != 0 && G_ZoneClanList[2] == LandmarkGauge.Gauge.Clan && LandmarkGauge.Gauge.ValueReal <= 1.) LandmarkGauge.Gauge.Speed = 1;
			else LandmarkGauge.Gauge.Speed = 0;
			// Captured
			if (LandmarkGauge.Gauge.Value >= LandmarkGauge.Gauge.Max && LandmarkGauge.Gauge.Clan != G_ZoneClanList[2]) 
			{
				// Give bonus to timer and manage only once
				if (G_RoundTime > 0 && G_RoundTimeBonus > 0)
				{
					TempGoalNb += 1;
					if(TempGoalNb == 1)
					{
						EndTime += (G_RoundTimeBonus*1000);
						G_ZoneClanList[2] = LandmarkGauge.Gauge.Clan;
						UpdateMarker();
					}	
				}	
				
				LandmarkGauge.Gauge.Captured = True;

				UpdateBasesColors();
				if(LandmarkGauge.Sector.PlayersIds.count > 0)
				{
					foreach (PlayerId in LandmarkGauge.Sector.PlayersIds) 
					{
						if (Players.existskey(PlayerId) && Players[PlayerId].Score != Null) 
						{
							declare Player <=> Players[PlayerId];
							declare CurrentCapGoals for Player.Score = 0;
							CurrentCapGoals += 1;
							Player.Armor += 200;
							//ST2::SetColValue("ST_Captured", Player.Score, "$1F1"^TextLib::ToText(CurrentCapGoals));
							Score::AddPoints(Player, 3);
						}
					}
				}
				if (Players.existskey(FirstOnGoal)) 
				{
					foreach(Player in Players)
					{
						if(Player.CurrentClan == G_ZoneClanList[2] && Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
						{
							UnspawnPlayer(Player);
							if(G_ZoneClanList[2] == 1)
 							{
 								declare SpawnTicket for Player = 0;
								SpawnTicket = 1;
 							}
							else if(G_ZoneClanList[2] == 2) 
							{
								declare SpawnTicket for Player = 0;
								SpawnTicket = 1;
							}	
						}		
					}
					if(G_ZoneClanList[2] > 0)
					{
						UIManager.UIAll.SendNotice(
						TextLib::Compose(_("$<%1$> captured Zone B"), Teams[G_ZoneClanList[2]-1].ColorizedName), 
						CUIConfig::ENoticeLevel::Default , Null, 
						CUIConfig::EAvatarVariant::Default, 
						CUIConfig::EUISound::Capture, 0
						);
						Message::CleanBigMessages();
		
						foreach(Player in Players)
						{
							declare MSG = "";
							switch(Player.User.Language)
							{
								case "pl": MSG = TextLib::Compose(_("$AAAStrefa B$g przejęta przez $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "fr": MSG = TextLib::Compose(_("$AAAZone B$g contrôlée par $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "ru": MSG = TextLib::Compose(_("$AAAЗона B$g контролируется $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "it": MSG = TextLib::Compose(_("$AAALa zona B$g Presa da $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "de": MSG = TextLib::Compose(_("$AAAZone B$g wird von $<%1$> kontrolliert!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								default: MSG = TextLib::Compose(_("$AAAZone B$g is controlled by $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
							} 
							Message::SendBigMessage(Player, MSG, 3500, 0);
						}	
						foreach(Spectator in Spectators)
						{
							declare MSG = "";
							switch(Spectator.User.Language)
							{
								case "pl": MSG = TextLib::Compose(_("$AAAStrefa B$g przejęta przez $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "fr": MSG = TextLib::Compose(_("$AAAZone B$g contrôlée par $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "ru": MSG = TextLib::Compose(_("$AAAЗона B$g контролируется $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "it": MSG = TextLib::Compose(_("$AAALa zona B$g Presa da $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								case "de": MSG = TextLib::Compose(_("$AAAZone B$g wird von $<%1$> kontrolliert!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
								default: MSG = TextLib::Compose(_("$AAAZone B$g is controlled by $<%1$>!"), Teams[G_ZoneClanList[2]-1].ColorizedName);
							} 
							Message::SendBigMessage(Spectator, MSG, 4000, 0);
						}
					}
				}
			}	
		}
		if(LandmarkGauge.Tag == "Zone C")
		{
			if(PlayerCountC[1] > 0 || PlayerCountC[2] > 0)
			{
				if (LandmarkGauge.Gauge.Clan == 0) 
				{
					if (PlayerCountC[1] > PlayerCountC[2]) LandmarkGauge.Gauge.Clan = 1;
					else if (PlayerCountC[2] > PlayerCountC[1]) LandmarkGauge.Gauge.Clan = 2;
				}
				// Capturing
				if (PlayerCountC[LandmarkGauge.Gauge.Clan] > PlayerCountC[3-LandmarkGauge.Gauge.Clan] && !LandmarkGauge.Gauge.Captured)
				{ 
					LandmarkGauge.Gauge.Speed = 2 + PlayerCountC[LandmarkGauge.Gauge.Clan] - PlayerCountC[3-LandmarkGauge.Gauge.Clan];
					if(S_PlayAnn)
					{
						foreach(Player in AllPlayers)
						{
							if(Player.CurrentClan == LandmarkGauge.Gauge.Clan && !G_Ann[4])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/capturingC.ogg", 6., Player);
								G_Ann[4] = True;
								ResetBlock(4);
							}	
							else if(Player.CurrentClan == 3-LandmarkGauge.Gauge.Clan && !G_Ann[5])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/oppcapturingC.ogg", 6., Player);
								G_Ann[5] = True;
								ResetBlock(5);
							}	
						}
					}
				}	
				// Opposing
				else if (PlayerCountC[3-LandmarkGauge.Gauge.Clan] > PlayerCountC[LandmarkGauge.Gauge.Clan]) 
				{
					LandmarkGauge.Gauge.Speed = -1 - PlayerCountC[3-LandmarkGauge.Gauge.Clan] + PlayerCountC[LandmarkGauge.Gauge.Clan];
					if(S_PlayAnn)
					{
						foreach(Player in AllPlayers)
						{
							if(Player.CurrentClan == LandmarkGauge.Gauge.Clan && !G_Ann[5])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/oppcapturingC.ogg", 6., Player);
								G_Ann[5] = True;
								ResetBlock(5);
							}	
							else if(Player.CurrentClan == 3-LandmarkGauge.Gauge.Clan && !G_Ann[4])
							{
								Sound::PlaySound("file://Media/Sounds/FireFight/capturingC.ogg", 6., Player);
								G_Ann[4] = True;
								ResetBlock(4);
							}	
						}
					}
					if (LandmarkGauge.Gauge.Value == 0.)
					{
						UpdateMarker();
						LandmarkGauge.Gauge.Clan = 3-LandmarkGauge.Gauge.Clan;
						G_ZoneClanList[3] = 0;
						//FirstOnGoal == NullId;
					}	
				} 
				// Draw
				else {
					LandmarkGauge.Gauge.Speed = 0;
				}
			} 
			// Regeneration
			else if(LandmarkGauge.Gauge.Clan != 0 && G_ZoneClanList[3] == LandmarkGauge.Gauge.Clan && LandmarkGauge.Gauge.ValueReal <= 1.) LandmarkGauge.Gauge.Speed = 1;
			else LandmarkGauge.Gauge.Speed = 0;
			// Captured
			if (LandmarkGauge.Gauge.Value >= LandmarkGauge.Gauge.Max && LandmarkGauge.Gauge.Clan != G_ZoneClanList[3]) 
			{
				// Give bonus to timer and manage only once
				if (G_RoundTime > 0 && G_RoundTimeBonus > 0)
				{
					TempGoalNb += 1;
					if(TempGoalNb == 1)
					{
						EndTime += (G_RoundTimeBonus*1000);
						G_ZoneClanList[3] = LandmarkGauge.Gauge.Clan;
						UpdateMarker();
					}	
				}	
				
				LandmarkGauge.Gauge.Captured = True;

				UpdateBasesColors();
				if(LandmarkGauge.Sector.PlayersIds.count > 0)
				{
					foreach (PlayerId in LandmarkGauge.Sector.PlayersIds) 
					{
						if (Players.existskey(PlayerId) && Players[PlayerId].Score != Null) 
						{
							declare Player <=> Players[PlayerId];
							Player.Armor += 200;
							declare CurrentCapGoals for Player.Score = 0;
							CurrentCapGoals += 1;
							//ST2::SetColValue("ST_Captured", Player.Score, "$1F1"^TextLib::ToText(CurrentCapGoals));
							Score::AddPoints(Player, 3);
						}
					}
				}
				if (Players.existskey(FirstOnGoal)) 
				{
					foreach(Player in Players)
					{
						if(Player.CurrentClan == G_ZoneClanList[3] && Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
						{
							UnspawnPlayer(Player);
							if(G_ZoneClanList[3] == 1)
 							{
 								declare SpawnTicket for Player = 0;
								SpawnTicket = 1;
 							}
							else if(G_ZoneClanList[3] == 2) 
							{
								declare SpawnTicket for Player = 0;
								SpawnTicket = 1;
							}	
						}		
					}
					if(G_ZoneClanList[3] > 0)
					{
						UIManager.UIAll.SendNotice(
							TextLib::Compose(_("$<%1$> captured Zone C"), Teams[G_ZoneClanList[3]-1].ColorizedName), 
							CUIConfig::ENoticeLevel::Default , Null, 
							CUIConfig::EAvatarVariant::Default, 
							CUIConfig::EUISound::Capture, 0
						);
						Message::CleanBigMessages();
						foreach(Player in Players)
						{
							declare MSG = "";
							switch(Player.User.Language)
							{
								case "pl": MSG = TextLib::Compose(_("$AAAStrefa C$g przejęta przez $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "fr": MSG = TextLib::Compose(_("$AAAZone C$g contrôlée par $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "ru": MSG = TextLib::Compose(_("$AAAЗона C$g контролируется $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "it": MSG = TextLib::Compose(_("$AAALa zona C$g Presa da $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "de": MSG = TextLib::Compose(_("$AAAZone C$g wird von $<%1$> kontrolliert!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								default: MSG = TextLib::Compose(_("$AAAZone C$g is controlled by $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
							} 
							Message::SendBigMessage(Player, MSG, 3500, 0);
						}	
						foreach(Spectator in Spectators)
						{
							declare MSG = "";
							switch(Spectator.User.Language)
							{
								case "pl": MSG = TextLib::Compose(_("$AAAStrefa C$g przejęta przez $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "fr": MSG = TextLib::Compose(_("$AAAZone C$g contrôlée par $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "ru": MSG = TextLib::Compose(_("$AAAЗона C$g контролируется $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "it": MSG = TextLib::Compose(_("$AAALa zona C$g Presa da $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								case "de": MSG = TextLib::Compose(_("$AAAZone C$g wird von $<%1$> kontrolliert!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
								default: MSG = TextLib::Compose(_("$AAAZone C$g is controlled by $<%1$>!"), Teams[G_ZoneClanList[3]-1].ColorizedName);
							} 
							Message::SendBigMessage(Spectator, MSG, 4000, 0);
						}
					}
				}
			}	
		}
	}
}

if(G_LastProgressUpdate + 1000 < Now)
{
	G_LastProgressUpdate = Now;
	Layers::Update("Progression", UpdateLayerProgression(0));
	Layers::Update("HUD", UpdateLayerHUD());
	G_PlayerCountA = PlayerCountA;
	G_PlayerCountB = PlayerCountB;
	G_PlayerCountC = PlayerCountC;

	G_PlayersAlive = [1 => 0, 2 => 0];
	
	foreach(Player in Players)
	{
		if(Player.Armor > 0 && Player.CurrentClan > 0) G_PlayersAlive[Player.CurrentClan] += 1;
		// Read or Init player statistics
		declare Fired for Player.Score = 0;
		declare Hits for Player.Score = 0;
		declare CurrentAcc for Player.Score = 0;
		if(Fired > 0) CurrentAcc = 100 * Hits / Fired;
		else CurrentAcc = 0;
		if(CurrentAcc > 100) CurrentAcc = MathLib::Rand(91, 98);
		if(CurrentAcc < 0) CurrentAcc = MathLib::Rand(91, 98);
		if(!(Layers::IsMissing("WeaponSelection", Player))) Layers::Detach("WeaponSelection", Player);
	}	
	if(G_PlayersAlive[1] <= 0)
	{
		Victory::SetRoundWinnerIfNoWinner(2);
		RoundClanWinner = 2;
		MB_StopRound = True;
		LT_AnnounceEliminationMessage(0, 0);
	}
	else if(G_PlayersAlive[2] <= 0)
	{
		Victory::SetRoundWinnerIfNoWinner(1);
		RoundClanWinner = 1;
		MB_StopRound = True;
		LT_AnnounceEliminationMessage(1, 0);
	}
}	

// Events
foreach (Event in PendingEvents) 
{
	switch(Event.Type)
	{
		case CSmModeEvent::EType::OnShoot:
		{
			if(Event.Shooter != Null)
			{
				declare Fired for Event.Shooter.Score = 0;
				Fired += 1;
			}
			else Discard(Event);
		}
		case CSmModeEvent::EType::OnArmorEmpty:
		{
			if(Event.Victim != Null && Event.Shooter != Null)
			{
				if (Event.Victim.Armor > 100)
				{
					declare SpawnArmor for Event.Victim = 100;
					SpawnArmor -= 100;
					declare SpawnTicket for Event.Victim = 0;
					SpawnTicket = 1;
				}
				else
				{
					Layers::Detach("HUD", Event.Victim);
					declare SpawnTicket for Event.Victim = 0;
					SpawnTicket = 0;
					declare CurrentKills for Event.Shooter.Score = 0;
					CurrentKills += 1;
					declare CurrentDeaths for Event.Victim.Score = 0;
					CurrentDeaths += 1;
					if (G_PlayersAlive[Event.Victim.CurrentClan] > 1) 
					{
						declare SpawnArmor for Event.Victim = 100;
						SpawnArmor -= 100;

						//Remove primary weapon after elimination
						ActionBind(Event.Victim, CSmMode::EActionSlot::Slot_A, CSmMode::EActionInput::None);
						SetPlayerAmmoMax(Event.Victim, CSmMode::EWeapon::Laser, 0);
						SetPlayerAmmoMax(Event.Victim, CSmMode::EWeapon::Nucleus, 0);
						Event.Victim.AmmoGain = 0.;
						declare UI <=> UIManager.GetUI(Event.Victim);
						if (UI != Null) 
						{
							declare netwrite Net_PrimaryWeapon for UI = 0;
							Net_PrimaryWeapon = 0;
						}
						foreach(Player in Players)
						{
							declare UI <=> UIManager.GetUI(Player);
							if (UI != Null) 
							{
								declare netwrite Integer[Text] Net_PrimaryWeapons for UI;
								Net_PrimaryWeapons[Event.Victim.Login] = 0;
							}
						}

						declare PLeft = G_PlayersAlive[Event.Victim.CurrentClan]-1;
						if (PLeft <= 3) LT_AnnounceEliminationMessage(Event.Victim.CurrentClan-1, PLeft);
					}
				}	
				XmlRpc::OnArmorEmpty(Event);
				PassOn(Event);
			}
			else Discard(Event);	
		}
		case CSmModeEvent::EType::OnHit:
		{
			if(Event.Victim != Null && Event.Shooter != Null) 
			{
				// Discard friendly fire
				if (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) Discard(Event);
				else 
				{
					if(Event.WeaponNum == GetWeaponNum(CSmMode::EWeapon::Laser))
					{
						declare UI <=> UIManager.GetUI(Event.Shooter);
						if(UI != Null)
						{
							// Get distance
							declare Distance = MathLib::Distance(Event.Shooter.Position, Event.Victim.Position);
							LT_AnnounceHitDistance(Distance, Event.Shooter);
						}
					}		
					if (Event.Shooter != Event.Victim)
					{
						declare Hits for Event.Shooter.Score = 0;
						Hits += 1;
						declare UI <=> UIManager.GetUI(Event.Shooter);
						if (UI != Null) 
						{
							Score::AddPoints(Event.Shooter, Event.Damage/100);
							---HeadshotFunctions---
							---AnnounceHeadshot---
						}
						if(Event.Victim.Armor - Event.Damage <= 0)
						{
							declare SpawnTicket for Event.Victim = 0;
							SpawnTicket = 0;
						}		
					}	
					//declare SpawnArmor for Event.Victim = 0;
					//SpawnArmor = Event.Victim.Armor - Event.Damage; 

					XmlRpc::OnHit(Event);
					PassOn(Event);
				}
			}
			else Discard(Event);	
		}
		case CSmModeEvent::EType::OnActionCustomEvent:
		{
			if(Event.Shooter != Null && Event.Victim != Null) 
			{
				// Discard friendly fire
				if (Event.Param1 == "damage" && Event.Shooter.CurrentClan == Event.Victim.CurrentClan) Discard(Event);
				else if(Event.Param1 == "damage" && Event.Victim != Event.Shooter) 
				{
					declare Damage = TextLib::ToInteger(Event.Param2[0]);
           			declare Points = Damage / 100;
          	 		if(Damage < 100)
					{
						Points = 1;
						Damage = 100;
					}
					declare Hits for Event.Shooter.Score = 0;
					Hits += 1;
					declare UI <=> UIManager.GetUI(Event.Shooter);
					if (UI != Null) 
					{
						---HeadshotFunctions---
						---ActionMakerAnnounceHeadshot---
					}
           			RemovePlayerArmor(Event.Victim, Damage, Event.Shooter, Points);
           	 		Score::AddPoints(Event.Shooter, Points);
          			if(Event.Victim.Armor - Damage <= 0)
					{
						declare SpawnTicket for Event.Victim = 0;
						SpawnTicket = 0;
					}	
           			PassOn(Event);
        		}
			}
 			else Discard(Event);
		}
		case CSmModeEvent::EType::OnPlayerRequestRespawn:
		{
			if(Event.Player == Null) Discard(Event);

			declare Message = "";
			declare SpawnArmor for Event.Player = 100;
			SpawnArmor = Event.Player.Armor - 200;
			declare SpawnTicket for Event.Player = 0;
			if(SpawnArmor >= 100) SpawnTicket = 1;
			declare CurrentDeaths for Event.Player.Score = 0;
			CurrentDeaths += 1;

			//Remove primary weapon after elimination
			ActionBind(Event.Player, CSmMode::EActionSlot::Slot_A, CSmMode::EActionInput::None);
			SetPlayerAmmoMax(Event.Player, CSmMode::EWeapon::Laser, 0);
			SetPlayerAmmoMax(Event.Player, CSmMode::EWeapon::Nucleus, 0);
			Event.Player.AmmoGain = 0.;
			declare UI <=> UIManager.GetUI(Event.Player);
			if (UI != Null) 
			{
				declare netwrite Net_PrimaryWeapon for UI = 0;
				Net_PrimaryWeapon = 0;
			}
			foreach(Player in Players)
			{
				declare UI <=> UIManager.GetUI(Player);
				if (UI != Null) 
				{
					declare netwrite Integer[Text] Net_PrimaryWeapons for UI;
					Net_PrimaryWeapons[Event.Player.Login] = 0;
				}
			}
			if(G_PlayersAlive[Event.Player.CurrentClan] > 1) 
			{
				declare PLeft = G_PlayersAlive[Event.Player.CurrentClan];
				if(PLeft <= 3) LT_AnnounceEliminationMessage(Event.Player.CurrentClan-1, PLeft);
	 		}

			XmlRpc::OnPlayerRequestRespawn(Event);
			PassOn(Event);
		}
		case CSmModeEvent::EType::OnCapture: Discard(Event);
		// Weapon switch via mouse scroll
		case CSmModeEvent::EType::OnPlayerRequestActionChange: 
		{
			if (Event.Player == Null) Discard(Event);
			else 
			{
				LT_CycleWeapon(Event.Player, Event.ActionChange);
				PassOn(Event);
			}
		}
		// On near miss
		case CSmModeEvent::EType::OnNearMiss:
		{
			---OnNearMiss---
		}
		// When player touches object
		case CSmModeEvent::EType::OnPlayerTouchesObject:
		{
			if(Event.Player == Null || Event.Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) Discard(Event);
			
			LT_PickUpObject(Event.Player, Event.Object);
			PassOn(Event);
		}
		// Weapon switch via keyboard
		case CSmModeEvent::EType::OnActionEvent: 
		{
			if(Event.Player == Null) Discard(Event);

			LT_SwitchWeapon(Event.Player, Event.ActionInput);
			PassOn(Event);
		}
		//default: PassOn(Event);
	}	
}

// Check end round conditions
if(G_ZoneClanList[1] == 1 && G_ZoneClanList[2] == 1 && G_ZoneClanList[3] == 1)
{
	Victory::SetRoundWinnerIfNoWinner(1);
	RoundClanWinner = 1;
	MB_StopRound = True;
	foreach(Player in Players)
	{
		declare MSG = "";
		switch(Player.User.Language)
		{
			case "pl": MSG = "zdobyli wszystkie cele.";
			case "fr": MSG = "a capturé tous les objectifs.";
			case "ru": MSG = "захватил все флаги.";
			case "it": MSG = "Hanno catturato tutte le obiettivi.";
			case "de": MSG = "hat alle Ziele erobert.";
			default: MSG = "captured all goals.";
		}
		Message::SendBigMessage(Player, TextLib::Compose(_("$<%1$> %2"), Teams[0].ColorizedName, MSG), 3500, 0, CUIConfig::EUISound::VictoryPoint, 2);
	}
	foreach(Spectator in Spectators)
	{
		declare MSG = "";
		switch(Spectator.User.Language)
		{
			case "pl": MSG = "zdobyli wszystkie cele.";
			case "fr": MSG = "a capturé tous les objectifs.";
			case "ru": MSG = "захватил все флаги.";
			case "it": MSG = "Hanno catturato tutte le obiettivi.";
			case "de": MSG = "hat alle Ziele erobert.";
			default: MSG = "captured all goals.";
		}
		Message::SendBigMessage(Spectator, TextLib::Compose(_("$<%1$> %2"), Teams[0].ColorizedName, MSG), 3500, 0, CUIConfig::EUISound::VictoryPoint, 2);
	}
}
else if(G_ZoneClanList[1] == 2 && G_ZoneClanList[2] == 2 && G_ZoneClanList[3] == 2)
{
	Victory::SetRoundWinnerIfNoWinner(2);
	RoundClanWinner = 2;
	MB_StopRound = True;
	foreach(Player in Players)
	{
		declare MSG = "";
		switch(Player.User.Language)
		{
			case "pl": MSG = "zdobyli wszystkie cele.";
			case "fr": MSG = "a capturé tous les objectifs.";
			case "ru": MSG = "захватил все флаги.";
			case "it": MSG = "Hanno catturato tutte le obiettivi.";
			case "de": MSG = "hat alle Ziele erobert.";
			default: MSG = "captured all goals.";
		}
		Message::SendBigMessage(Player, TextLib::Compose(_("$<%1$> %2"), Teams[1].ColorizedName, MSG), 3500, 0, CUIConfig::EUISound::VictoryPoint, 2);
	}
	foreach(Spectator in Spectators)
	{
		declare MSG = "";
		switch(Spectator.User.Language)
		{
			case "pl": MSG = "zdobyli wszystkie cele.";
			case "fr": MSG = "a capturé tous les objectifs.";
			case "ru": MSG = "захватил все флаги.";
			case "it": MSG = "Hanno catturato tutte le obiettivi.";
			case "de": MSG = "hat alle Ziele erobert.";
			default: MSG = "captured all goals.";
		}
		Message::SendBigMessage(Spectator, TextLib::Compose(_("$<%1$> %2"), Teams[1].ColorizedName, MSG), 3500, 0, CUIConfig::EUISound::VictoryPoint, 2);
	}
}
***

***EndRound***
***
Layers::Detach("Markers");
Layers::Update("Progression", UpdateLayerProgression(0));
// Search for MVP
foreach(Player in Players)
{
	if(Player.Score.RoundPoints > BestRoundScore && Player.Score.RoundPoints > 0)
	{
		BestRoundScore = Player.Score.RoundPoints;
		MVP = Player;
	}
	declare UI <=> UIManager.GetUI(Player);
	if (UI == Null) continue;
	UI.MarkersXML = "";
	Layers::Detach("HUD", Player);
}
if(MVP != Null && RoundClanWinner != 0)
{
	declare CurrentMVP for MVP.Score = 0;
	CurrentMVP += 1;
}	
Sound::PlaySound("file://Media/Sounds/FireFight/roundend.ogg", -5., 400);
MiniMap::Detach();
MB_Sleep(1500);
SM::UnspawnAllPlayers();
MB_Sleep(1000);
ST::UpdateST(1, MB_SectionRoundNb, G_MapPointsLimit, S_FinalRoundExceptDraw);
//DestroyMinimap();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
UIManager.UIAll.MarkersXML = "";
Victory::RoundEnd();
EndTime = -1;
if(RoundClanWinner > 0)
{
	G_ClansMapPoints[RoundClanWinner] += 1;
	foreach(Player in Players)
	{
		declare Laziness for Player.Score = 0;
		if(Player.Score.RoundPoints <= 5) Laziness -= 1;
	}
}	
Message::CleanAllMessages();
Layers::Update("Progression", UpdateLayerProgression(1));
Layers::Detach("HUD");
LT_UpdateHeader(G_ClansMapPoints[1], G_ClansMapPoints[2]);
LT_AnnounceRoundWin(RoundClanWinner);
if(RoundClanWinner > 0 && MVP != Null) Message::SendStatusMessage(TextLib::Compose(_("$fc0MVP:$g $<%1$>"), MVP.Name), 6500, 0, CUIConfig::EUISound::Silence, 1);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
MB_Sleep(4000);
Score::RoundEnd();
if(MB_SectionRoundNb == G_MapPointsLimit*2)
{
	if(G_ClansMapPoints[1] > G_ClansMapPoints[2])
	{
		ClanMapWinner = 1;
		MB_StopMap = True;
	}
	else if(G_ClansMapPoints[2] > G_ClansMapPoints[1])
	{
		ClanMapWinner = 2;
		MB_StopMap = True;
	}
	else
	{
		if(!S_FinalRoundExceptDraw)
		{
			ClanMapWinner = 0;
			MB_StopMap = True;
		}
		else
		{
			G_MapPointsLimit = G_ClansMapPoints[1]+1;
		}
	}
}
if(G_ClansMapPoints[1] > G_MapPointsLimit)
{
	ClanMapWinner = 1;
	MB_StopMap = True;
}
else if(G_ClansMapPoints[2] > G_MapPointsLimit)
{
	ClanMapWinner = 2;
	MB_StopMap = True;
}
if(MB_SectionRoundNb == G_MapPointsLimit)
{
	---AnnounceHalfTime---
}
else if(MB_SectionRoundNb == G_MapPointsLimit*2 && S_FinalRoundExceptDraw && ClanMapWinner == 0)
{
	---AnnounceFinalRound---
}
MB_Sleep(5000);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
Message::CleanAllMessages();
if(PlayersNbTotal < 2) WaitForPlayers();
***

***EndMap***
***
ObjectDestroyAll();
Victory::MatchEnd();
Layers::Detach("Progression");
Message::SendStatusMessage(TextLib::Compose(_("Map result: %1 %2 - %3 %4"),Teams[0].ColorizedName,TextLib::ToText(G_ClansMapPoints[1]),TextLib::ToText(G_ClansMapPoints[2]),Teams[1].ColorizedName), 6000, 0, CUIConfig::EUISound::EndRound, 0);
if (ClanMapWinner > 0) Message::SendBigMessage(TextLib::Compose(_("%1 wins the map!"), Teams[ClanMapWinner - 1].ColorizedName), 6000, 0);
else Message::SendBigMessage(TextLib::Compose(_("|Match|Draw")), 6000, 0, CUIConfig::EUISound::Silence, 0);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
MB_Sleep(6000);
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
//RANK
Rank::EndMap(MB_SectionRoundNb, G_ClansMapPoints[1], G_ClansMapPoints[2]);
ST::UpdateST(2, MB_SectionRoundNb, G_MapPointsLimit, S_FinalRoundExceptDraw);
MB_Sleep(6000);
foreach(Player in AllPlayers)
{
	declare UI <=> UIManager.GetUI(Player);
	if (UI != Null) 
	{
		declare Fired for Player.Score = 0;
		declare Hits for Player.Score = 0;
		declare CurrentKills for Player.Score = 0;
		declare CurrentDeaths for Player.Score = 0;
		declare CurrentCapGoals for Player.Score = 0;
		// Collect data to stats page if server is ranked
		if(Rank::IsServerRanked(False) && PlayersNbTotal >= 4)
		{
			declare persistent Firefight_AllKills 		for Player.User = 0;
			declare persistent Firefight_AllDeaths 		for Player.User = 0;
			declare persistent Firefight_AllFired 		for Player.User = 0;
			declare persistent Firefight_AllHits	 	for Player.User = 0;
			declare persistent Firefight_AllGoals 		for Player.User = 0;
			declare persistent Firefight_MapsPlayed 	for Player.User = 0;
			Firefight_AllKills += CurrentKills;
			Firefight_AllDeaths += CurrentDeaths;
			Firefight_AllFired += Fired;
			Firefight_AllHits += Hits;
			Firefight_AllGoals += CurrentCapGoals;
			Firefight_MapsPlayed += 1;
		}
		declare CurrentAcc for Player.Score = 0;
		CurrentAcc = 0;
		Fired = 0;
		Hits = 0;
		CurrentKills = 0;
		CurrentDeaths = 0;
		CurrentCapGoals = 0;
		declare CurrentMVP for Player.Score = 0;
		CurrentMVP = 0;
		declare StartAtRound for Player.Score = 0;
		StartAtRound = 0;
	}
}
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
ST::Unload();
Rank::Detach();
Message::CleanAllMessages();
LT_VoteForNextMap();
***

***EndServer***
***
ST::Unload();
Rank::Unload();
Layers::Destroy("Progression");
Layers::Destroy("ProgressBar");
Layers::Destroy("RulesReminder");
CustomUI::Unload();
Layers::Destroy("Markers");
SpawnScreen::DestroyRules();
Layers::Clean();
***

Void ResetBlock(Integer _Id)
{
	declare BlockedStamp = Now;
	if(BlockedStamp + 7000 == Now)
	{
		G_Ann[_Id] = False;
		return;
	}
	
	return;
}

Void InitGoals() 
{
	G_NbPolesA	= 0;
	G_NbPolesB	= 0;
	G_NbPolesC	= 0;
	foreach (LandmarkGauge in MapLandmarks_Gauge) 
	{
		if(LandmarkGauge.Sector != Null)
		{
			switch(LandmarkGauge.Tag)
			{
				case "Zone A": G_NbPolesA +=1;
				case "Zone B": G_NbPolesB +=1;
				case "Zone C": G_NbPolesC +=1;
			}
		}
	}		
	
	foreach (LandmarkGauge in MapLandmarks_Gauge) 
	{
		if(LandmarkGauge.Sector != Null)
		{
			switch(LandmarkGauge.Tag)
			{
				case "Zone A":
				{
					declare Summary = (G_PoleCaptureDuration-1) + G_NbPolesA;
					LandmarkGauge.Gauge.Max		= Summary * 3000;
					LandmarkGauge.Gauge.Value	= LandmarkGauge.Gauge.Max;
					LandmarkGauge.Gauge.Speed	= 0;
					if(LT_IsAfterHalfTime()) LandmarkGauge.Gauge.Clan	= 2;
					else LandmarkGauge.Gauge.Clan = 1;
					LandmarkGauge.Gauge.Captured= True;
				}
				case "Zone B":
				{
					declare Summary = (G_PoleCaptureDuration-1) + G_NbPolesB;
					LandmarkGauge.Gauge.Max		= Summary * 3000;
					LandmarkGauge.Gauge.Value	= 0;
					LandmarkGauge.Gauge.Speed	= 0;
					LandmarkGauge.Gauge.Clan	= 0;
					LandmarkGauge.Gauge.Captured= False;
				}
				case "Zone C":
				{
					declare Summary = (G_PoleCaptureDuration-1) + G_NbPolesC;
					LandmarkGauge.Gauge.Max		= Summary * 3000;
					LandmarkGauge.Gauge.Value	= LandmarkGauge.Gauge.Max;
					LandmarkGauge.Gauge.Speed	= 0;
					if(LT_IsAfterHalfTime()) LandmarkGauge.Gauge.Clan	= 1;
					else LandmarkGauge.Gauge.Clan = 2;
					LandmarkGauge.Gauge.Captured= True;
				}
			}
		}	
	}
}

Void InitSpawns()
{
	// Init spawn
	G_SpawnList.clear();
	G_SpawnList1.clear();
	G_SpawnList2.clear();
	declare Integer I = 0;
	foreach (LandmarkPlayerSpawn in MapLandmarks_PlayerSpawn)
	{
		switch(LandmarkPlayerSpawn.Tag)
		{
			case "Spawn1":
			{
				G_SpawnList1.add(LandmarkPlayerSpawn.Id);
				G_SpawnList[I] <=> LandmarkPlayerSpawn;
				I+=1;
			}
			case "Spawn2":
			{
				G_SpawnList2.add(LandmarkPlayerSpawn.Id);
				G_SpawnList[I] <=> LandmarkPlayerSpawn;
				I+=1;
			}
		}		
	}	
}

Void UpdateBasesColors() {
	foreach (Base in MapBases) {
		Base.Clan = 0;
		Base.IsActive = True;
	}
	
	declare UpdatedBases = Ident[];
	
	foreach (Spawn in MapLandmarks_PlayerSpawn) 
	{
		if (Spawn.Base == Null) continue;
		
		if(LT_IsAfterHalfTime())
		{
			switch(Spawn.Tag)
			{
				case "Spawn1": Spawn.Base.Clan = 2;
				case "Spawn2": Spawn.Base.Clan = 1;
			}	
		}
		else
		{
			switch(Spawn.Tag)
			{
				case "Spawn1": Spawn.Base.Clan = 1;
				case "Spawn2": Spawn.Base.Clan = 2;
			}
		}
		Spawn.Base.IsActive = True;
		UpdatedBases.add(Spawn.Base.Id);
	}
	
	foreach (Pole in MapLandmarks_Gauge)
	{
		declare Clan = 0;
		if (Pole.Gauge.Clan == 1 || Pole.Gauge.Clan == 2) Clan = Pole.Gauge.Clan;
		
		if (Pole.Base != Null) {
			if (!UpdatedBases.exists(Pole.Base.Id)) {
				Pole.Base.Clan = Clan;
				UpdatedBases.add(Pole.Base.Id);
			} else if (Pole.Base.Clan != Clan) {
				Pole.Base.Clan = 0;
			}
		}
	}
}

Text UpdateLayerHUD()
{
	declare Text ClanColorA;
	declare Text ClanColorB;
	declare Text ClanColorC;
	if(Teams.existskey(0) && Teams.existskey(1))
	{
		if(G_ZoneClanList[1] == 0) ClanColorA = "EEE";
		else ClanColorA = TextLib::SubString(Teams[G_ZoneClanList[1]-1].ColorText, 1, 3);
		if(G_ZoneClanList[2] == 0) ClanColorB = "EEE";
		else ClanColorB = TextLib::SubString(Teams[G_ZoneClanList[2]-1].ColorText, 1, 3);
		if(G_ZoneClanList[3] == 0) ClanColorC = "EEE";
		else ClanColorC = TextLib::SubString(Teams[G_ZoneClanList[3]-1].ColorText, 1, 3);
	}
	else
	{
		ClanColorA = "DDD";
		ClanColorB = "DDD";
		ClanColorC = "DDD";
	}
	
	return """
<frame hidden="1" id="Frame_Overlay">
	<label posn="-65 -70 1" text="1: -" textsize="1" halign="left" id="Label_Primary"/>
	<label posn="-65 -74 1" text="2: -" textsize="1" halign="left" id="Label_Secondary"/>
	<quad posn="0 -63 0" halign="center" valign="center" sizen="39 8" style="EnergyBar" substyle="BgText"/>
	<quad posn="-10 -60 1" halign="center" sizen="6 6" image="{{{C_ImgModeDir}}}/hud_map_A.dds" colorize="{{{ClanColorA}}}"/>
	<quad posn="0 -60 1" halign="center" sizen="6 6" image="{{{C_ImgModeDir}}}/hud_map_B.dds" colorize="{{{ClanColorB}}}"/>
	<quad posn="10 -60 1" halign="center" sizen="6 6" image="{{{C_ImgModeDir}}}/hud_map_C.dds" colorize="{{{ClanColorC}}}"/>
</frame>
<script><!--	
main()
{
	declare Frame_Overlay <=> (Page.GetFirstChild("Frame_Overlay") as CMlFrame);
	declare Label_Primary <=> (Page.GetFirstChild("Label_Primary") as CMlLabel);
	declare Label_Secondary <=> (Page.GetFirstChild("Label_Secondary") as CMlLabel);
	while(True)
	{
		yield;
		if(InputPlayer == Null) continue;
		if(InputPlayer.Armor > 0)
		{
			Frame_Overlay.Visible = True;
			declare netread Net_PrimaryWeapon for UI = 0;
			switch(Net_PrimaryWeapon)
			{
				case 1: Label_Primary.Value = "1: Laser";
				case 2: Label_Primary.Value = "1: Plasma Gun";
				case 3: Label_Primary.Value = "1: Burning Grenades";
				case 4: Label_Primary.Value = "1: Nucleus";
				case 5: Label_Primary.Value = "1: Shotgun";
				case 6: Label_Primary.Value = "1: Power Bomb";
				default: Label_Primary.Value = "1: -";
			}
			declare netread Integer[Text] Net_SecondaryWeapons for UI;
			if(Net_SecondaryWeapons.existskey(InputPlayer.Login))
			{
				switch(Net_SecondaryWeapons[InputPlayer.Login])
				{
					case 1: Label_Secondary.Value = "2: Rockets";
					case 2: Label_Secondary.Value = "2: Bouncing Rockets";
					case 3: Label_Secondary.Value = "2: Electric Pistol";
					default: Label_Secondary.Value = "2: -";
				}
			}
			else Label_Secondary.Value = "2: -";
		}
		else Frame_Overlay.Visible = False;		
	}
}
--></script>
	""";
}

Text UpdateLayerMarkers(Integer _A, Integer _B, Integer _C)
{
	declare ScreenRatio		= 9./16.;
	declare MarkerHeight	= 5.5;
	declare MarkerWidth		= MarkerHeight * ScreenRatio;
	declare ImgGoalA		= C_ImgModeDir^"/hud_map_A.dds";
	declare ImgGoalB		= C_ImgModeDir^"/hud_map_B.dds";
	declare ImgGoalC		= C_ImgModeDir^"/hud_map_C.dds";
	//declare ImgPlayer 		= C_ImgModeDir^"/hud_map_A.dds";
	declare MLText 			= "";
	declare MarkerColor		= "";

	MLText = """
<script><!--
main() 
{
	declare GoalAArray = CMlFrame[Integer];
	declare GoalBArray = CMlFrame[Integer];
	declare GoalCArray = CMlFrame[Integer];
	declare I = 1;
	for(I, 1, {{{_A}}}) GoalAArray[I] = (Page.GetFirstChild("Goal_A"^I) as CMlFrame);
	for(I, 1, {{{_B}}}) GoalAArray[I] = (Page.GetFirstChild("Goal_B"^I) as CMlFrame);
	for(I, 1, {{{_C}}}) GoalAArray[I] = (Page.GetFirstChild("Goal_C"^I) as CMlFrame);
}
--></script>
""";
	declare Index = 1;
	for(Index, 1, _A)
	{
		if(G_ZoneClanList[1] == 0) MarkerColor = "DDD";
		else MarkerColor = TextLib::SubString(Teams[G_ZoneClanList[1]-1].ColorText, 1, 3);
		MLText ^= """
			<frame id="Goal_A{{{Index}}}">
				<quad sizen="{{{MarkerWidth}}} {{{MarkerHeight}}}" valign="center" halign="center" autoscale="False" image="{{{ImgGoalA}}}" colorize="{{{MarkerColor}}}"/>
			</frame>
		""";
	}
	for(Index, 1, _B)
	{
		if(G_ZoneClanList[2] == 0) MarkerColor = "DDD";
		else MarkerColor = TextLib::SubString(Teams[G_ZoneClanList[2]-1].ColorText, 1, 3);
		MLText ^= """
			<frame id="Goal_B{{{Index}}}">
				<quad sizen="{{{MarkerWidth}}} {{{MarkerHeight}}}" valign="center" halign="center" autoscale="False" image="{{{ImgGoalB}}}" colorize="{{{MarkerColor}}}"/>
			</frame>
		""";
	}
	for(Index, 1, _C)
	{
		if(G_ZoneClanList[3] == 0) MarkerColor = "DDD";
		else MarkerColor = TextLib::SubString(Teams[G_ZoneClanList[3]-1].ColorText, 1, 3);
		MLText ^= """
			<frame id="Goal_C{{{Index}}}">
				<quad sizen="{{{MarkerWidth}}} {{{MarkerHeight}}}" valign="center" halign="center" autoscale="False" image="{{{ImgGoalC}}}" colorize="{{{MarkerColor}}}"/>
			</frame>
		""";
	}

	/*foreach(Player in Players)
	{
		MarkerColor = TextLib::SubString(Teams[Player.CurrentClan-1].ColorText, 1, 3);
		MLText ^= """
		<frame id="Player_{{{Player.Login}}}">
			<quad sizen="{{{MarkerWidth}}} {{{MarkerHeight}}}" valign="center" halign="center" autoscale="False" image="{{{ImgPlayer}}}" colorize="{{{MarkerColor}}}"/>
		</frame>
		""";
	}*/

	return MLText;		
}

Void UpdateMarker()
{
	UIManager.UIAll.MarkersXML = "";
	declare ManiaLink = "";
	declare A = 0;
	declare B = 0;
	declare C = 0;
	foreach (Goal in MapLandmarks_Gauge) 
	{
		declare PosX = Goal.Position.X;
		declare PosY = Goal.Position.Y + 0.2;
		declare PosZ = Goal.Position.Z;
		if (Goal.Tag == "Zone A") 
		{
			A+=1;
			ManiaLink ^= """<marker manialinkframeid="Goal_A{{{A}}}" pos="{{{PosX}}} {{{PosY}}} {{{PosZ}}}" distmax="150" hudvisibility="Always" minimapvisibility="WhenInFrame" />""";
		} 
		else if (Goal.Tag == "Zone B") 
		{
			B+=1;
			ManiaLink ^= """<marker manialinkframeid="Goal_B{{{B}}}" pos="{{{PosX}}} {{{PosY}}} {{{PosZ}}}" distmax="150" hudvisibility="Always" minimapvisibility="WhenInFrame" />""";
		}
		else if (Goal.Tag == "Zone C") 
		{
			C+=1;
			ManiaLink ^= """<marker manialinkframeid="Goal_C{{{C}}}" pos="{{{PosX}}} {{{PosY}}} {{{PosZ}}}" distmax="150" hudvisibility="Always" minimapvisibility="WhenInFrame" />""";
		}
	}
	foreach (MapLandmark in MapLandmarks_ObjectAnchor) 
	{
		declare PosX = MapLandmark.Position.X;
		declare PosY = MapLandmark.Position.Y+1;
		declare PosZ = MapLandmark.Position.Z;
		declare ImagePath = C_ImgModeDir^"/IconWeapon"^MapLandmark.Tag^".dds";
		ManiaLink ^= """
			<marker imageurl="{{{ImagePath}}}" pos="{{{PosX}}} {{{PosY}}} {{{PosZ}}}" hudvisibility="Always" distmax="{{{G_ObjectDetector}}}" minimapvisibility="WhenInFrame" />
		""";
	}
	/*foreach (Player in Players)
	{
		declare ImagePath = "file://Media/Manialinks/Common/Pointer.dds";
		declare TeamColor = TextLib::SubString(Teams[Player.CurrentClan-1].ColorText, 1, 3);
		ManiaLink ^= """
			<marker playerlogin="{{{Player.Login}}}" imageurl="{{{ImagePath}}}" color="{{{TeamColor}}}" isturning="false" hudvisibility="Never" minimapvisibility="WhenInFrame" />
		""";
	}*/
	Layers::Update("Markers", UpdateLayerMarkers(A, B, C));
	UIManager.UIAll.MarkersXML = ManiaLink;
}

Text UpdateLayerRulesReminder() {
	declare Text HighlightColor		= "fA0";
	
	declare Text TitleText 			= TextLib::Compose(_("Welcome to %1!"), "Firefight");
	
	return """
<dico>
   <language id="en">
    	<rule1>- Control 3 zones of goals or eliminate all enemies to win the round.</rule1>
    	<rule2>- Capture objectives to revive teammates and heal yourself (2 armors).</rule2>
    	<rule3>- Search for weapon items on map to get primary weapon.</rule3>
    	<rule4>- Controlled zone can be stolen by the opposing team.</rule4>
   </language>
   <language id="pl">
    	<rule1>- Zdobądz 3 strefy terytorialne lub wyeliminuj rywali by wygrać rundę.</rule1>
    	<rule2>- Zdobywaj cele by odrodzić wyeliminowanych i się uleczyć(2 pancerze).</rule2>
    	<rule3>- Zdobądź bonus na mapie by mieć 2 bronie.</rule3>
    	<rule4>- Rywale mogą przechwycić twoje strefy terytorialne.</rule4>
   </language>
   <language id="fr">
		<rule1>- Prends le contrôle de 3 zones d'objectifs ou élimine tous les adversaires pour gagner la manche.</rule1>
		<rule2>- Capture les objectifs pour ranimer tes coéquipiers et te soigner (2 armures).</rule2>
		<rule3>- Search for weapon items on map to get primary weapon.</rule3>
		<rule4>- Les zones contrôlées peuvent être volées par l'équipe adverse</rule4>
   </language>
   <language id="ru">
   		<rule1>- Контролируйте 3 зоны с флагами или уничтожьте всех врагов, чтобы выиграть раунд.</rule1>
   		<rule2>- Захват целей возрождает товарищей по команде и исцеляет вас (2 брони).</rule2>
   		<rule3>- Search for weapon items on map to get primary weapon.</rule3>
   		<rule4>- Контролируемую зону может захватить вражеская команда.</rule4>
   </language>
   <language id="it">
   		<rule1>- Cattura 3 zone territoriali o Elizina riali per vincere il turno.</rule1>
   		<rule2>- cattura destinazioni per rinascere eliminati e curarsi(2 armature).</rule2>
   		<rule3>- Search for weapon items on map to get primary weapon.</rule3>
   		<rule4>- Rivali possono prendere le tue zone territoriali.</rule4>
   </language>
   <language id="de">
    	<rule1>- Erobern Sie die 3 Zielzonen oder eliminieren Sie alle Gegner, um die Runde zu gewinnen.</rule1>
    	<rule2>- Nehmen Sie die Ziele ein, um ihre Teamkameraden wiederzubeleben und sich selbst zu heilen (2 Schilde).</rule2>
    	<rule3>- Search for weapon items on map to get primary weapon.</rule3>
    	<rule4>- Eroberte Zonen können vom gegnerischen Team gestohlen werden.</rule4>
    </language>
</dico>
<frame id="RulesReminderMainFrame" hidden="true" posn="0 13 100" >
	<quad posn="0 25 0" sizen="162 70" bgcolor="FFFA" image="{{{C_ImgModeDir}}}/WelcomeBg.dds" halign="center" valign="center"/>
	<label posn="-71 46 1" sizen="86 5" text="{{{TitleText}}}" textsize="4" textcolor="fA0" style="TextValueSmallSm"/>
	<label posn="-73 39 1" sizen="146 26" textid="rule1"/>
	<label posn="-73 33 1" sizen="146 26" textid="rule2"/>
	<label posn="-73 27 1" sizen="146 26" textid="rule3"/>
	<label posn="-73 21 1" sizen="146 26" textid="rule4"/>
	<label posn="0 12 1" halign="center" text="{{{TextLib::Compose(_("Press '$<%1F1$>' to close this window."), "$"^HighlightColor)}}}" textsize="3" />
</frame>
<script><!--
	while(InputPlayer == Null) yield;

	declare RulesReminderMainFrame 	<=> (Page.GetFirstChild("RulesReminderMainFrame") as CMlFrame);
	
	while(True) {
		yield;
		
		RulesReminderMainFrame.Show();
		
		foreach(Event in PendingEvents) {
			switch(Event.Type){
				case CMlEvent::Type::KeyPress: {
					if(Event.CharPressed == "2424832" ) { // F1
						RulesReminderMainFrame.Visible = !RulesReminderMainFrame.Visible;
						return; // End of this behavior
					}
				}
			}
		}
	}
--></script>""";
}

// Update Progression layer
Text UpdateLayerProgression(Integer _Show)
{
	declare Integer ZoneA;
	declare Real RZoneA;
	declare Integer ClanA;
	declare Text ClanColorA;
	declare Integer ZoneB;
	declare Real RZoneB;
	declare Integer ClanB;
	declare Text ClanColorB;
	declare Integer ZoneC;
	declare Real RZoneC;
	declare Integer ClanC;
	declare Text ClanColorC;
	declare Text ClanColor1;
	declare Text ClanColor2;
	if(Teams.existskey(0)) ClanColor1 = TextLib::ColorToText(Teams[0].ColorPrimary);
	else ClanColor1 = "11F";
	if(Teams.existskey(1)) ClanColor2 = TextLib::ColorToText(Teams[1].ColorPrimary);
	else ClanColor2 = "F11";
	foreach(LandmarkGauge in MapLandmarks_Gauge) 
	{
		if (LandmarkGauge.Gauge.ValueReal <= 0. || LandmarkGauge.Gauge.ValueReal > 1.) continue;
		switch(LandmarkGauge.Tag)
		{
			case "Zone A":
			{
				ZoneA = MathLib::NearestInteger(LandmarkGauge.Gauge.ValueReal * 100.);
				RZoneA = LandmarkGauge.Gauge.ValueReal;
				ClanA = LandmarkGauge.Gauge.Clan;
				if(G_ZoneClanList[1] == 0) ClanColorA = "$fff";
				else ClanColorA = Teams[G_ZoneClanList[1]-1].ColorText;
			}
			case "Zone B":
			{
				ZoneB = MathLib::NearestInteger(LandmarkGauge.Gauge.ValueReal * 100.);
				RZoneB = LandmarkGauge.Gauge.ValueReal;
				ClanB = LandmarkGauge.Gauge.Clan;
				if(G_ZoneClanList[2] == 0) ClanColorB = "$fff";
				else ClanColorB = Teams[G_ZoneClanList[2]-1].ColorText;
			}
			case "Zone C":
			{
				ZoneC = MathLib::NearestInteger(LandmarkGauge.Gauge.ValueReal * 100.);
				RZoneC = LandmarkGauge.Gauge.ValueReal;
				ClanC = LandmarkGauge.Gauge.Clan;
				if(G_ZoneClanList[3] == 0) ClanColorC = "$fff";
				else ClanColorC = Teams[G_ZoneClanList[3]-1].ColorText;
			}
		}
	}
	declare Text ManiaLink = "";
	ManiaLink = """
<manialink version="1" name="Firefight:Progression Layer">
<dico>
   <language id="en">
    	<prog>Zone progression</prog>
   </language>
   <language id="fr">
   		<prog>Progression de la zone</prog>
   </language>
   <language id="ru">
   		<prog>Прогресс зоны</prog>
   </language>
   <language id="it">
   		<prog>Sviluppo della conquista</prog>
   </language>
   <language id="de">
   		<prog>Zone Fortschritt</prog>
   </language>
   <language id="pl">
    	<prog>Postęp zdobywania</prog>
   </language>
</dico>
<frame posn="{{{C_LayerProgressionPosition.X}}} {{{C_LayerProgressionPosition.Y}}} {{{C_LayerProgressionPosition.Z}}}" id="Frame_Progression" hidden="{{{_Show}}}">
	<quad posn="-23.5 -44 0" sizen="54 19" halign="left" valign="center" style="EnergyBar" substyle="BgText"/>
	<quad posn="12 -35 1" sizen="6 5" bgcolor="FFFA" image="{{{C_ImgModeDir}}}/DefendersLeft.dds" colorize="{{{ClanColor1}}}"/>
	<quad posn="22 -35 1" sizen="6 5" bgcolor="FFFA" image="{{{C_ImgModeDir}}}/DefendersLeft.dds" colorize="{{{ClanColor2}}}"/>
	<label posn="-21.5 -38 1" sizen="31 5" textid="prog" textsize="2" textemboss="1" valign="center2"/>
	<label posn="-20 -42 1" halign="left" valign="center" textsize="1" textemboss="1" text="{{{TextLib::Compose(_("%1A:$g"), ClanColorA)}}}" style="TextTitle3" sizen="10 6"/>
	<label posn="14 -42 1" halign="left" valign="center" textemboss="1" textsize="1" text="{{{TextLib::ToText(G_PlayerCountA[1])}}}" style="TextTitle3"/>
	<label posn="18 -42 1" halign="left" valign="center" textemboss="1" text="vs" style="TextTitle3" textsize="1"/>
	<label posn="24 -42 1" halign="left" valign="center" textemboss="1" textsize="1" text="{{{TextLib::ToText(G_PlayerCountA[2])}}}" style="TextTitle3"/>
	<gauge posn="-16 -37 1" sizen="29 10" halign="left" valign="middle" style="EnergyBar" ratio="{{{RZoneA}}}" clan="{{{ClanA}}}" drawbg="0" drawblockbg="1"/>
	<label posn="-20 -46 1" halign="left" valign="center" textsize="1" textemboss="1" text="{{{TextLib::Compose(_("%1B:$g"), ClanColorB)}}}" style="TextTitle3" sizen="10 6"/>
	<label posn="14 -46 1" halign="left" valign="center" textemboss="1" textsize="1" text="{{{TextLib::ToText(G_PlayerCountB[1])}}}" style="TextTitle3"/>
	<label posn="18 -46 1" halign="left" valign="center" textemboss="1" text="vs" style="TextTitle3" textsize="1"/>
	<label posn="24 -46 1" halign="left" valign="center" textemboss="1" textsize="1" text="{{{TextLib::ToText(G_PlayerCountB[2])}}}" style="TextTitle3"/>
	<gauge posn="-16 -41 1" sizen="29 10" halign="left" valign="middle" style="EnergyBar" ratio="{{{RZoneB}}}" clan="{{{ClanB}}}" drawbg="0" drawblockbg="1"/>
	<label posn="-20 -50 1" halign="left" valign="center" textsize="1" textemboss="1" text="{{{TextLib::Compose(_("%1C:$g"), ClanColorC)}}}" style="TextTitle3" sizen="10 6"/>
	<label posn="14 -50 1" halign="left" valign="center" textemboss="1" textsize="1" text="{{{TextLib::ToText(G_PlayerCountC[1])}}}" style="TextTitle3"/>
	<label posn="18 -50 1" halign="left" valign="center" textemboss="1" text="vs" style="TextTitle3" textsize="1"/>
	<label posn="24 -50 1" halign="left" valign="center" textemboss="1" textsize="1" text="{{{TextLib::ToText(G_PlayerCountC[2])}}}" style="TextTitle3"/>
	<gauge posn="-16 -45 1" sizen="29 10" halign="left" valign="middle" style="EnergyBar" ratio="{{{RZoneC}}}" clan="{{{ClanC}}}" drawbg="0" drawblockbg="1"/>
</frame>
<script><!--
main()
{
	declare Frame_Progression 	<=> (Page.GetFirstChild("Frame_Progression") 	as CMlFrame);
	declare netread Vec3 	Net_Firefight_ProgressionLayerPosition	for Teams[0];
	declare Vec3 PrevProgressionLayerPosition;

	while (True) 
	{
		yield;
		if (!PageIsVisible) continue;
		if (PrevProgressionLayerPosition != Net_Firefight_ProgressionLayerPosition) 
		{
			PrevProgressionLayerPosition = Net_Firefight_ProgressionLayerPosition;
			Frame_Progression.RelativePosition = Net_Firefight_ProgressionLayerPosition;
		}
	}
}
--></script>
</manialink>
""";
	return ManiaLink;
}

// Build capture progress layer
Text UpdateLayerProgressBar()
{
	declare Text ML = "";
	ML = """
<manialink version="1" name="Firefight:Real-Time Progress Bar">
<dico>
   <language id="en">
      <label0>Loading data...</label0>
      <label1>Decapturing opponent zone...</label1>
      <label2>Clear all goals in zone from enemies to begin capture.</label2>
      <label3>Zone captured.</label3>
      <label4>Defending captured zone...</label4>
      <label5>Capturing the zone...</label5>
   </language>
   <language id="fr">
      <label0>Chargement des données...</label0>
      <label1>Délivrance d'une zone adverse...</label1>
      <label2>Débarrasse de tout adversaire les objectifs d'une zone pour commencer la capture.</label2>
      <label3>Zone capturée.</label3>
      <label4>Défense d'une zone capturée...</label4>
      <label5>Capture d'une zone...</label5>
   </language>
   <language id="ru">
   	  <label0>Загрузка данных...</label0>
   	  <label1>Дезахват зоны противника...</label1>
   	  <label2>Уничтожьте всех врагов в зоне флагов, чтобы начать захват.</label2>
   	  <label3>Зона захвачена.</label3>
   	  <label4>Защита захваченной зоны...</label4>
   	  <label5>Захват зоны...</label5>
   </language>
   <language id="it">
   	  <label0>Caricamento...</label0>
   	  <label1>Conquista del territorio di un nemico...</label1>
   	  <label2>Pulisci i Mast Della zona dagli avversari per cominciare a catturare.</label2>
   	  <label3>La zona presa.</label3>
   	  <label4>La difesa Della zona presa...</label4>
   	  <label5>La conquista della zona...</label5>
   </language>
   <language id="de">
   		<label0>Lade daten...</label0>
   		<label1>Befreie gegnerische Zone...</label1>
   		<label2>Säubere alle Ziele in der Zone von Gegnern um die Eroberung zu beginnen.</label2>
   	  	<label3>Zone erobert.</label3>
   	  	<label4>Verteidige eroberte Zone...</label4>
   	 	<label5>Zone erobern...</label5>
   </language>
   <language id="pl">
      <label0>Ładowanie...</label0>
      <label1>Przechwytywanie terytorium wroga...</label1>
      <label2>Oczyść maszty strefy z przeciwników bo rozpocząć zdobywanie.</label2>
      <label3>Strefa zdobyta.</label3>
      <label4>Obrona zdobytej strefy...</label4>
      <label5>Zdobywanie strefy...</label5>
   </language>
</dico>
	<frame class="LibCustomUI_Module" id="FireFight_GaugeCapture">
		<frame posn="0 -50" id="Frame_Capture">
			<quad posn="0 0 2" sizen="128 20" halign="center" valign="center" image="{{{C_ImgModeDir}}}/Structure.dds" />
			<label posn="0 -2.5 3" halign="center" textsize="3" textemboss="1" textprefix="$bbb" textid="label0" id="Label_Goal" style="TextButtonBig"/>
			<label posn="0 13 3" halign="center" textsize="3" textemboss="1" style="TextCreditsTitle" textid="label1" hidden="1" textprefix="$o" id="Label_Info_1"/>
			<label posn="0 13 3" halign="center" textsize="3" textemboss="1" style="TextCreditsTitle" textid="label2" hidden="1" textprefix="$o" id="Label_Info_2"/>
			<label posn="0 13 3" halign="center" textsize="3" textemboss="1" style="TextCreditsTitle" textid="label3" hidden="1" textprefix="$o" id="Label_Info_3"/>
			<label posn="0 13 3" halign="center" textsize="3" textemboss="1" style="TextCreditsTitle" textid="label4" hidden="1" textprefix="$o" id="Label_Info_4"/>
			<label posn="0 13 3" halign="center" textsize="3" textemboss="1" style="TextCreditsTitle" textid="label5" hidden="1" textprefix="$o" id="Label_Info_5"/>
			<gauge posn="0 8 2" sizen="124 10.4" halign="center" style="EnergyBar" drawbg="1" drawblockbg="1" id="Gauge_Capture" />
		</frame>
	</frame>	
<script><!--
#Include "MathLib" as ML
main() 
{
	declare Frame_Capture 	<=> (Page.GetFirstChild("Frame_Capture") 	as CMlFrame);
	declare Label_Capture 	<=> (Page.GetFirstChild("Label_Capture") 	as CMlLabel);
	declare Label_Info_1	<=> (Page.GetFirstChild("Label_Info_1")		as CMlLabel);
	declare Label_Info_2	<=> (Page.GetFirstChild("Label_Info_2")		as CMlLabel);
	declare Label_Info_3	<=> (Page.GetFirstChild("Label_Info_3")		as CMlLabel);
	declare Label_Info_4	<=> (Page.GetFirstChild("Label_Info_4")		as CMlLabel);
	declare Label_Info_5	<=> (Page.GetFirstChild("Label_Info_5")		as CMlLabel);
	declare Label_Goal 		<=> (Page.GetFirstChild("Label_Goal") 		as CMlLabel);
	declare Gauge_Capture 	<=> (Page.GetFirstChild("Gauge_Capture") 	as CMlGauge);
	{{{CustomUI::InjectMLInit()}}}
	while (True) 
	{
		yield;
		if (InputPlayer == Null) continue;
		if (!PageIsVisible) continue;
		
		{{{CustomUI::InjectMLLoop()}}}

		Label_Info_1.Hide();
		Label_Info_2.Hide();
		Label_Info_3.Hide();		
		Label_Info_4.Hide();
		Label_Info_5.Hide();
		
		if (InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && InputPlayer.CapturedLandmark != Null && InputPlayer.CapturedLandmark.Gauge != Null && (InputPlayer.CapturedLandmark.Tag == "Zone A" || InputPlayer.CapturedLandmark.Tag == "Zone B" || InputPlayer.CapturedLandmark.Tag == "Zone C")) 
		{
			if (!Frame_Capture.Visible) Frame_Capture.Visible = True;
			Gauge_Capture.Ratio = InputPlayer.CapturedLandmark.Gauge.ValueReal;
			Gauge_Capture.Clan = InputPlayer.CapturedLandmark.Gauge.Clan;
			Label_Goal.Value = InputPlayer.CapturedLandmark.Tag^"$dda  "^ML::FloorInteger(InputPlayer.CapturedLandmark.Gauge.ValueReal * 100.)^"%";
			if(InputPlayer.CapturedLandmark.Gauge.Speed < 0)
			{
				Label_Info_1.Show();
				Label_Info_2.Hide();
				Label_Info_3.Hide();		
				Label_Info_4.Hide();
				Label_Info_5.Hide();
			}
			else if(InputPlayer.CapturedLandmark.Gauge.Speed == 0)
			{
				if(InputPlayer.CapturedLandmark.Gauge.Clan != InputPlayer.CurrentClan)
				{
					Label_Info_1.Hide();
					Label_Info_2.Show();
					Label_Info_3.Hide();		
					Label_Info_4.Hide();
					Label_Info_5.Hide();
				}	
				else if(InputPlayer.CapturedLandmark.Gauge.ValueReal == 1.)
				{
					Label_Info_1.Hide();
					Label_Info_2.Hide();
					Label_Info_3.Show();		
					Label_Info_4.Hide();
					Label_Info_5.Hide();
				}
				else
				{
					Label_Info_1.Hide();
					Label_Info_2.Hide();
					Label_Info_3.Hide();		
					Label_Info_4.Show();
					Label_Info_5.Hide();
				}
			}
			else if(InputPlayer.CapturedLandmark.Gauge.Speed > 1)
			{
				Label_Info_1.Hide();
				Label_Info_2.Hide();
				Label_Info_3.Hide();		
				Label_Info_4.Hide();
				Label_Info_5.Show();
			}

		} 
		else if (Frame_Capture.Visible) 
		{
			Frame_Capture.Visible = False;
		}
	}
}
--></script>
</manialink>	
""";
	
	return ML;	
}	

Void SelectClasses(Integer _TimeToChoose) 
{
	---SelectClasses---
}

Void WaitForPlayers() 
{
	---WaitForPlayers---
}

/*Void CreateSpawnScreenMap()
{
	declare Text MarkersML;
	MarkersML = "";
	
	for (I, 1, 512) {
		MarkersML ^= """
			<quad sizen="2.5 2.5" halign="center" valign="center" image="{{{C_ImgModeDir}}}/hud_map_pointer.png" id="Quad_Player{{{I}}}" hidden="1"/>
		""";
	}
	
	Layers::Update("SpawnScreenMap", """
		<frame posn="0 0 1" id="Frame_Map" hidden="0">
			{{{MarkersML}}}
			<minimap sizen="180 180" posn="0 0 1" mapposition="1 0"/>
			<quad sizen="320 180" posn="0 0 0" halign="center" valign="center" bgcolor="111"/>
		</frame>	
<script><!--
Vec3 GetColor(Vec3 _Input) 
{
	declare Vec3 Output;
	Output = <
	_Input[0] / 1.25 + 0.2,
	_Input[1] / 1.25 + 0.2,
	_Input[2] / 1.25 + 0.2
	>;
	return Output;
}
			
main() 
{
	declare Integer CurAlivePlayers;
				
	while(True) 
	{
		yield;
					
		foreach (Player in Players) 
		{
			if (CurAlivePlayers != Players.count) 
			{
				for (I, 1, Players.count) 
				{
					declare Pointer for Players[I - 1] <=> (Page.GetFirstChild("Quad_Player"^I) as CMlQuad);
				}
				CurAlivePlayers = Players.count;
			}
						
			declare CMlQuad Pointer for Player;
						// 384
			Pointer.RelativePosition = <
			Player.Position[0] / 384 * 180,
			Player.Position[2] / 384 * 180,
			2.
			>;
						
			if (Player.Position != <0., 0., 0.>) 
			{
				if (Player.CurrentClan == 1) 
				{
					if (Player.Armor > 0 && Teams.existskey(0)) Pointer.Colorize = GetColor(Teams[0].ColorPrimary);
					Pointer.Show();
				} 
				else if(Player.CurrentClan == 2)
				{
					if (Player.Armor > 0 && Teams.existskey(1)) Pointer.Colorize = GetColor(Teams[1].ColorPrimary);
					Pointer.Show();
				}
			} 
			else
			{
				Pointer.Hide();
			}
		}
	}
}		
		--></script>
	""");
	Layers::Attach("SpawnScreenMap");
}


Void DestroySpawnScreenMap()
{
	Layers::Detach("SpawnScreenMap");
	Layers::Update("SpawnScreenMap", "");
}*/